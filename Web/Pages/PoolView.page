<%@ MasterClass="Bacularis\Web\Layouts\Main" Theme="Baculum-v2"%>
<com:TContent ID="Main">
	<!-- Header -->
	<header class="w3-container">
		<h5>
			<b><i class="fa fa-tape"></i> <%[ Pool details ]%></b>
		</h5>
	</header><br />
	<h3 class="view_header w3-show-inline-block"><%[ Pool: ]%> <%=$this->getPoolName()%> &nbsp;<span class="w3-small">[PoolId <%=$this->getPoolId()%>]</span></h3>
	<com:Bacularis.Web.Portlets.GoToResource ResourceType="Pool" />
	<div class="w3-bar w3-green w3-margin-bottom">
		<a class="w3-bar-item w3-button tab_btn" href="<%=$this->Service->constructUrl('PoolList')%>"><i class="fa fa-angle-left"></i></a>
		<button id="btn_pool_actions" type="button" class="w3-bar-item w3-button tab_btn w3-grey" onclick="W3Tabs.open(this.id, 'pool_actions');"><%[ Actions ]%></button>
		<button id="btn_pool_graphs" type="button" class="w3-bar-item w3-button tab_btn" onclick="W3Tabs.open(this.id, 'pool_graphs'); oPoolVolumeStatus.init();"><%[ Graphs ]%></button>
		<button id="btn_volumes_in_pool" type="button" class="w3-bar-item w3-button tab_btn" onclick="W3Tabs.open(this.id, 'volumes_in_pool');oVolumeList.table.responsive.recalc();"><%[ Volumes in pool ]%></button>
		<button id="btn_pool_config" type="button" class="w3-bar-item w3-button tab_btn" onclick="W3Tabs.open(this.id, 'pool_config'); return false;" style="display: <%=!empty($_SESSION['dir']) ? 'inline-block' : 'none'%>"><%[ Configure pool ]%></button>
	</div>
	<script>
const oVolumes = <%=json_encode($this->volumes_in_pool)%>;
	</script>
	<div class="w3-container tab_item" id="pool_actions">
		<com:TActiveLinkButton
			ID="UpdatePoolBtn"
			OnClick="updatePool"
			CssClass="w3-button w3-green w3-margin-bottom"
			CausesValidation="false"
			ClientSide.OnLoading="$('#status_pool_loading').show();"
			ClientSide.OnSuccess="$('#status_pool_loading').hide();"
		>
			<prop:Text><i class="fa fa-wrench"></i>&nbsp; <%=Prado::localize('Update pool')%></prop:Text>
		</com:TActiveLinkButton>
		<com:TActiveLinkButton
			ID="UpdateAllVolInPoolBtn"
			OnClick="updateAllVolumesInPool"
			CssClass="w3-button w3-green w3-margin-bottom"
			CausesValidation="false"
			ClientSide.OnLoading="$('#status_pool_loading').show();"
			ClientSide.OnSuccess="$('#status_pool_loading').hide();"
		>
			<prop:Text><i class="fa fa-wrench"></i>&nbsp; <%=Prado::localize('Update all vols in pool')%></prop:Text>
		</com:TActiveLinkButton>
		<com:Bacularis.Web.Portlets.AssignVolumesToPool
			PoolId="<%=$this->getPoolId()%>"
		/>
		<i id="status_pool_loading" class="fa fa-sync w3-spin" style="display: none; vertical-align: super;"></i>
		<div class="w3-row">
			<div class="w3-card w3-quarter w3-padding w3-margin-right details_card">
				<h4><%[ Limits ]%></h4>
				<table style="width: 90%">
					<tr>
						<td><%[ Max. vols ]%></td>
						<td><strong><com:TActiveLabel ID="MaxVols" /></strong></td>
					</tr>
					<tr>
						<td><%[ Max. vol. jobs ]%></td>
						<td><strong><com:TActiveLabel ID="MaxVolJobs" /></strong></td>
					</tr>
					<tr>
						<td><%[ Max. vol. files ]%></td>
						<td><strong><com:TActiveLabel ID="MaxVolFiles" /></strong></td>
					</tr>
					<tr>
						<td><%[ Max. vol. bytes ]%></td>
						<td><strong><com:TActiveLabel ID="MaxVolBytes" CssClass="size" /></strong></td>
					</tr>
					<tr>
						<td><%[ Vol. use duration ]%></td>
						<td><strong><com:TActiveLabel ID="VolUseDuration" CssClass="time" /></strong></td>
					</tr>
				</table>
			</div>
			<div class="w3-card w3-quarter w3-padding w3-margin-right details_card">
				<h4><%[ Recycling ]%></h4>
				<table style="width: 90%">
					<tr>
						<td class="w3-half"><%[ Recycle ]%></td>
						<td><strong><com:TActiveLabel ID="Recycle" /></strong></td>
					</tr>
					<tr>
						<td><%[ Vol. retention ]%></td>
						<td><strong><com:TActiveLabel ID="VolRetention" CssClass="time" /></strong></td>
					</tr>
					<tr>
						<td><%[ AutoPrune ]%></td>
						<td><strong><com:TActiveLabel ID="AutoPrune" /></strong></td>
					</tr>
					<tr>
						<td><%[ Recycle pool ]%></td>
						<td><strong><com:TActiveLabel ID="RecyclePool" /></strong></td>
					</tr>
				</table>
			</div>
			<div class="w3-card w3-quarter w3-padding w3-margin-right details_card">
				<h4><%[ Options ]%></h4>
				<table style="width: 90%">
					<tr>
						<td><%[ Enabled ]%></td>
						<td><strong><com:TActiveLabel ID="Enabled" /></strong></td>
					</tr>
					<tr>
						<td><%[ Action on purge ]%></td>
						<td><strong><com:TActiveLabel ID="ActionOnPurge" /></strong></td>
					</tr>
					<tr>
						<td><%[ Scratch pool ]%></td>
						<td><strong><com:TActiveLabel ID="ScratchPool" /></strong></td>
					</tr>
					<tr>
						<td><%[ Next pool ]%></td>
						<td><strong><com:TActiveLabel ID="NextPool" /></strong></td>
					</tr>
				</table>
			</div>
		</div>
		<div id="pool_log" class="w3-panel w3-card" style="display: none">
			<div class="w3-code notranslate">
				<pre><com:TActiveLabel ID="PoolLog" /></pre>
			</div>
		</div>
	</div>
	<div class="w3-container tab_item" id="pool_graphs" style="display: none">
		<div id="job_graph_container">
			<div>
				<div id="pool_volume_status_graph" style="height: 310px; cursor: pointer;"></div>
				<div id="pool_volume_status_legend"></div>
			</div>
		</div>
		<script>
const oPoolVolumeStatus = {
	ids: {
		pool_volume_status_graph: 'pool_volume_status_graph',
		pool_volume_status_legend: 'pool_volume_status_legend'
	},
	txt: {
		pool_volume_status: {
			graph_title: '<%[ Pool volume status summary ]%>'
		}
	},
	graphs: {
		pool_volume_status: null,
	},
	colors: {
		pool_volume_status: {
			'Append': '#63c422',
			'Full': 'purple',
			'Used': '#2980B9',
			'Error': '#d70808',
			'Archive': '#FFFF66',
			'Recycle': '#17A589',
			'Purged': 'orange',
			'Read-Only': 'gray',
			'Disabled': '#dbdbdb',
			'Busy': '#1150e1',
			'Cleaning': 'white',
			'Scratch': 'pink'
		}
	},
	init: function() {
		this.prepare_pool_volume_status_graph();
	},
	prepare_pool_volume_status_graph: function() {
		this.destroy_pool_volume_status_graph();

		// Sort volumes to have graph labels always in the same order
		oVolumes.sort((a, b) => {
			const volstat_a = a.volstatus.toUpperCase();
			const volstat_b = b.volstatus.toUpperCase();
			if (volstat_a < volstat_b) {
				return -1;
			}
			if (volstat_a > volstat_b) {
				return 1;
			}
			return 0;
		});

		const data = {};
		for (let i = 0; i < oVolumes.length; i++) {
			if (!data.hasOwnProperty(oVolumes[i].volstatus)) {
				data[oVolumes[i].volstatus] = [];
			}
			data[oVolumes[i].volstatus].push(oVolumes[i]);
		}

		this.graphs.pool_volume_status = new GraphPieClass({
			data: data,
			container_id: this.ids.pool_volume_status_graph,
			graph_options: {
				pie: {
					labelFormatter: (total, value) => {
						return PieGraphBase.pie_label_formatter.call(PieGraphPool, total, value);
					}
				},
				mouse: {
					trackFormatter: (e) => {
						return PieGraphBase.pie_track_formatter.call(PieGraphPool, e);
					},
					mouseHandler: (e) => {
						return PieGraphBase.pie_mouse_handler.call(PieGraphPool, e);
					}
				},
				legend: {
					container: $('#' + this.ids.pool_volume_status_legend),
					labelFormatter: (label) => {
						return PieGraphBase.pie_legend_formatter.call(PieGraphPool, label);
					}
				},
				grid: {
					color: (ThemeMode.is_dark() ? 'white': 'black')
				},
				fontColor: (ThemeMode.is_dark() ? 'white': 'black'),
				title: this.txt.pool_volume_status.graph_title,
				colors: this.colors.pool_volume_status
			}
		});
	},
	destroy_pool_volume_status_graph: function() {
		if (this.graphs.pool_volume_status) {
			this.graphs.pool_volume_status.destroy();
		}
	}
};
ThemeMode.add_cb(() => {
	oPoolVolumeStatus.prepare_pool_volume_status_graph();
});
		</script>
	</div>
	<div class="w3-container tab_item" id="volumes_in_pool" style="display: none">
		<table id="volume_list" class="w3-table w3-striped w3-hoverable w3-margin-bottom" style="width: 100%">
			<thead>
				<tr>
					<th></th>
					<th>MediaId</th>
					<th><%[ Name ]%></th>
					<th><%[ Slot ]%></th>
					<th>PoolId</th>
					<th><%[ Pool ]%></th>
					<th>InChanger</th>
					<th>StorageId</th>
					<th><%[ Storage ]%></th>
					<th>DeviceId</th>
					<th><%[ Vol. status ]%></th>
					<th><%[ Enabled ]%></th>
					<th><%[ Recycle ]%></th>
					<th>MediaType</th>
					<th>MediaTypeId</th>
					<th>LabelType</th>
					<th><%[ First written ]%></th>
					<th><%[ Last written ]%></th>
					<th class="w3-center"><%[ Vol. bytes ]%></th>
					<th><%[ Max. vol. bytes ]%></th>
					<th><%[ Max. vol. jobs ]%></th>
					<th><%[ Max. vol. files ]%></th>
					<th><%[ Vol. capacity bytes ]%></th>
					<th><%[ Vol. abytes ]%></th>
					<th><%[ Vol. apadding ]%></th>
					<th><%[ Vol. hole bytes ]%></th>
					<th><%[ Vol. holes ]%></th>
					<th><%[ Vol. parts ]%></th>
					<th><%[ Vol. errors ]%></th>
					<th><%[ Vol. writes ]%></th>
					<th><%[ Label date ]%></th>
					<th><%[ Vol. jobs ]%></th>
					<th><%[ Vol. files ]%></th>
					<th><%[ Vol. blocks ]%></th>
					<th><%[ Vol. mounts ]%></th>
					<th><%[ Action on purge ]%></th>
					<th><%[ Vol. retention ]%></th>
					<th><%[ Cache retention ]%></th>
					<th><%[ Vol. use duration ]%></th>
					<th><%[ Media addressing ]%></th>
					<th><%[ Vol. read time ]%></th>
					<th><%[ Vol. write time ]%></th>
					<th><%[ Vol. type ]%></th>
					<th><%[ Vol. cloud parts ]%></th>
					<th><%[ Last part bytes ]%></th>
					<th><%[ End file ]%></th>
					<th><%[ End block ]%></th>
					<th>LocationId</th>
					<th><%[ Recycle count ]%></th>
					<th><%[ Initial write ]%></th>
					<th>ScratchPoolId</th>
					<th><%[ Scratch pool ]%></th>
					<th>RecyclePoolId</th>
					<th><%[ Recycle pool ]%></th>
					<th><%[ Comment ]%></th>
					<th><%[ When expire ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</thead>
			<tbody id="volume_list_body"></tbody>
			<tfoot>
				<tr>
					<th></th>
					<th>MediaId</th>
					<th><%[ Name ]%></th>
					<th><%[ Slot ]%></th>
					<th>PoolId</th>
					<th><%[ Pool ]%></th>
					<th>InChanger</th>
					<th>StorageId</th>
					<th><%[ Storage ]%></th>
					<th>DeviceId</th>
					<th><%[ Vol. status ]%></th>
					<th><%[ Enabled ]%></th>
					<th><%[ Recycle ]%></th>
					<th>MediaType</th>
					<th>MediaTypeId</th>
					<th>LabelType</th>
					<th><%[ First written ]%></th>
					<th><%[ Last written ]%></th>
					<th class="w3-center"><%[ Vol. bytes ]%></th>
					<th><%[ Max. vol. bytes ]%></th>
					<th><%[ Max. vol. jobs ]%></th>
					<th><%[ Max. vol. files ]%></th>
					<th><%[ Vol. capacity bytes ]%></th>
					<th><%[ Vol. abytes ]%></th>
					<th><%[ Vol. apadding ]%></th>
					<th><%[ Vol. hole bytes ]%></th>
					<th><%[ Vol. holes ]%></th>
					<th><%[ Vol. parts ]%></th>
					<th><%[ Vol. errors ]%></th>
					<th><%[ Vol. writes ]%></th>
					<th><%[ Label date ]%></th>
					<th><%[ Vol. jobs ]%></th>
					<th><%[ Vol. files ]%></th>
					<th><%[ Vol. blocks ]%></th>
					<th><%[ Vol. mounts ]%></th>
					<th><%[ Action on purge ]%></th>
					<th><%[ Vol. retention ]%></th>
					<th><%[ Cache retention ]%></th>
					<th><%[ Vol. use duration ]%></th>
					<th><%[ Media addressing ]%></th>
					<th><%[ Vol. read time ]%></th>
					<th><%[ Vol. write time ]%></th>
					<th><%[ Vol. type ]%></th>
					<th><%[ Vol. cloud parts ]%></th>
					<th><%[ Last part bytes ]%></th>
					<th><%[ End file ]%></th>
					<th><%[ End block ]%></th>
					<th>LocationId</th>
					<th><%[ Recycle count ]%></th>
					<th><%[ Initial write ]%></th>
					<th>ScratchPoolId</th>
					<th><%[ Scratch pool ]%></th>
					<th>RecyclePoolId</th>
					<th><%[ Recycle pool ]%></th>
					<th><%[ Comment ]%></th>
					<th><%[ When expire ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</tfoot>
		</table>
	</div>
	<div class="w3-container tab_item" id="pool_config" style="display: none">
		<div id="pool_view_rename_resource" class="w3-panel w3-pale-yellow w3-border" style="display: none">
			<h3><%[ Warning ]%></h3>
			<p><%[ The pool has not been renamed but it has been copied with the new name. Please note that if the original pool contained volumes, they have not been moved and they are still assigned to the original pool in the catalog database. To re-assign volumes from the original pool to this one please go to the MAIN MENU &#10148; Pools &#10148; [NEW POOL] &#10148; Tab: Actions and please use the 'Assign volumes' button. After re-assgning volumes you can delete the original pool. ]%></p>
		</div>
		<com:Bacularis.Web.Portlets.BaculaConfigDirectives
			ID="PoolConfig"
			ComponentType="dir"
			ResourceType="Pool"
			ShowCancelButton="false"
			ShowSectionTabs="true"
			OnRename="showAssignVolumesWarning"
		/>
	</div>
<script>
$(function() {
	Formatters.set_formatters();
});
var oVolumeList = {
	table: null,
	ids: {
		volume_list: 'volume_list',
		volume_list_body: 'volume_list_body'
	},
	init: function() {
		this.set_table();
	},
	set_table: function() {
		this.table = $('#' + this.ids.volume_list).DataTable({
			data: oVolumes,
			deferRender: true,
			dom: 'lBfrtip',
			stateSave: true,
			stateDuration: KEEP_TABLE_SETTINGS,
			buttons: [
				'copy', 'csv', 'colvis'
			],
			columns: [
				{
					className: 'details-control',
					orderable: false,
					data: null,
					defaultContent: '<button type="button" class="w3-button w3-blue"><i class="fa fa-angle-down"></i></button>'
				},
				{data: 'mediaid'},
				{data: 'volumename'},
				{data: 'slot'},
				{
					data: 'poolid',
					visible: false
				},
				{
					data: 'pool',
					visible: false
				},
				{
					data: 'inchanger',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					}
				},
				{
					data: 'storageid',
					visible: false
				},
				{
					data: 'storage',
					visible: false
				},
				{
					data: 'deviceid',
					visible: false
				},
				{data: 'volstatus'},
				{
					data: 'enabled',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{
					data: 'recycle',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{data: 'mediatype'},
				{
					data: 'mediatypeid',
					visible: false
				},
				{
					data: 'labeltype',
					visible: false
				},
				{
					data: 'firstwritten',
					render: render_date_local,
					visible: false
				},
				{
					data: 'lastwritten',
					render: render_date_local
				},
				{
					data: 'volbytes',
					render: render_bytes
				},
				{
					data: 'maxvolbytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'maxvoljobs',
					visible: false
				},
				{
					data: 'maxvolfiles',
					visible: false
				},
				{
					data: 'volcapacitybytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'volabytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'volapadding',
					visible: false
				},
				{
					data: 'volholebytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'volholes',
					visible: false
				},
				{
					data: 'volparts',
					visible: false
				},
				{
					data: 'volerrors',
					visible: false
				},
				{
					data: 'volwrites',
					visible: false
				},
				{
					data: 'labeldate',
					render: render_date_local,
					visible: false
				},
				{
					data: 'voljobs',
					visible: false
				},
				{
					data: 'volfiles',
					visible: false
				},
				{
					data: 'volblocks',
					visible: false
				},
				{
					data: 'volmounts',
					visible: false
				},
				{
					data: 'actiononpurge',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{
					data: 'volretention',
					render: render_time_period,
					visible: false
				},
				{
					data: 'cacheretention',
					render: render_time_period,
					visible: false
				},
				{
					data: 'voluseduration',
					render: render_time_period,
					visible: false
				},
				{
					data: 'mediaaddressing',
					visible: false
				},
				{
					data: 'volreadtime',
					render: render_time_period,
					visible: false
				},
				{
					data: 'volwritetime',
					render: render_time_period,
					visible: false
				},
				{
					data: 'voltype',
					visible: false
				},
				{
					data: 'volcloudparts',
					visible: false
				},
				{
					data: 'lastpartbytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'endfile',
					visible: false
				},
				{
					data: 'endblock',
					visible: false
				},
				{
					data: 'locationid',
					visible: false
				},
				{
					data: 'recyclecount',
					visible: false
				},
				{
					data: 'initialwrite',
					visible: false
				},
				{
					data: 'scratchpoolid',
					visible: false
				},
				{
					data: 'scratchpool',
					visible: false
				},
				{
					data: 'recyclepoolid',
					visible: false
				},
				{
					data: 'recyclepool',
					visible: false
				},
				{
					data: 'comment',
					visible: false
				},
				{
					data: 'whenexpire',
					render: render_date_ex,
					visible: false
				},
				{
					data: 'mediaid',
					render: function(data, type, row) {
						var btn = document.createElement('BUTTON');
						btn.className = 'w3-button w3-green';
						btn.type = 'button';
						var i = document.createElement('I');
						i.className = 'fa fa-list-ul';
						var label = document.createTextNode(' <%[ Details ]%>');
						btn.appendChild(i);
						btn.innerHTML += '&nbsp';
						btn.appendChild(label);
						btn.setAttribute('onclick', "document.location.href = '/web/volume/" + data + "/'");
						return btn.outerHTML;
					}
				}
			],
			responsive: {
				details: {
					type: 'column'
				}
			},
			columnDefs: [{
				className: 'control',
				orderable: false,
				targets: 0
			},
			{
				className: "dt-center",
				targets: [ 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 ]
			},
			{
				className: "dt-body-right",
				targets: [ 18 ]
			}],
			order: [3, 'asc'],
			initComplete: function () {
				this.api().columns([2, 3, 6, 10, 13]).every(function () {
					var column = this;
					var select = $('<select><option value=""></option></select>')
					.appendTo($(column.footer()).empty())
					.on('change', function () {
						var val = dtEscapeRegex(
							$(this).val()
						);
						column
						.search(val ? '^' + val + '$' : '', true, false)
						.draw();
					});
					if (column[0][0] == 3) {
						column.cells('', column[0]).render('display').unique().sort(sort_natural).each(function(d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
						});
					} else {
						column.cells('', column[0]).render('display').unique().sort().each(function(d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
						});
					}
				});
			}
		});
	}
};
oVolumeList.init();
let fragment = get_url_fragment();
fragment = fragment ? '#' + fragment : '';
<%=$this->getPoolId() > 0 ? "window.history.pushState({}, '', '/web/pool/" . $this->getPoolId() . "/" . $this->getPoolName() . "/' + fragment)" : ''%>;
</script>
</com:TContent>

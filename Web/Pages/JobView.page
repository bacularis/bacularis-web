<%@ MasterClass="Bacularis\Web\Layouts\Main" Theme="Baculum-v2"%>
<com:TContent ID="Main">
	<!-- Header -->
	<header class="w3-container">
		<h5>
			<b><i class="fa fa-tasks"></i> <%[ Job details ]%></b>
		</h5>
	</header>
	<h3 class="view_header"><%[ Job: ]%> <%=$this->getJobName()%> &nbsp;<span class="w3-small<%=$this->getJobId() == 0 ? ' hide' : ''%>">[<%[ JobId ]%> <%=$this->getJobId()%>]</span></h3>
	<com:TActiveLinkButton
		CssClass="w3-button w3-green w3-margin-left w3-margin-bottom w3-left"
		OnClick="loadRunJobModal"
		Attributes.onclick="document.getElementById('run_job').style.display='block'"
	>
		<i class="fa fa-cogs"></i> &nbsp;<%[ Run job ]%>
	</com:TActiveLinkButton>
	<com:Bacularis.Web.Portlets.GoToResource ResourceType="Job" Director="<%=$_SESSION['director']%>" />
	<com:Bacularis.Web.Portlets.RunJob ID="RunJobModal" />
	<div class="w3-bar w3-green w3-margin-bottom">
		<a class="w3-bar-item w3-button tab_btn" href="<%=$this->Service->constructUrl('JobList')%>#<%=$this->getJobId() > 0 ? 'job_history' : 'job_details'%>"><i class="fa fa-angle-left"></i></a>
		<button id="btn_job_log" type="button" class="w3-bar-item w3-button tab_btn <%=$this->getJobId() > 0 ? 'w3-grey' : 'hide'%>" onclick="W3Tabs.open(this.id, 'job_log'); job_callback_func(); oRunningJobStatus.init_refresh();"><%[ Job log ]%></button>
		<button id="btn_job_graphs" type="button" class="w3-bar-item w3-button tab_btn<%=$this->getJobId() == 0 ? ' w3-grey' : ''%>" onclick="W3Tabs.open(this.id, 'job_graphs'); oJobGraphs.update();"><%[ Graphs ]%></button>
		<com:TActiveLinkButton
			ID="JobConfigBtn"
			CssClass="w3-bar-item w3-button tab_btn"
			Attributes.onclick="W3Tabs.open(this.id, 'job_config');"
			Text="<%[ Configure job ]%>"
			Visible="<%=!empty($_SESSION['dir'])%>"
			OnCallback="loadJobConfig"
		/>
		<com:TActiveLinkButton
			ID="FilesetConfigBtn"
			CssClass="w3-bar-item w3-button tab_btn"
			Attributes.onclick="W3Tabs.open(this.id, 'fileset_config');"
			Text="<%[ Configure fileset ]%>"
			Visible="<%=!empty($_SESSION['dir'])%>"
			OnCallback="loadFileSetConfig"
		/>
		<com:TActiveLinkButton
			ID="ScheduleConfigBtn"
			CssClass="w3-bar-item w3-button tab_btn"
			Attributes.onclick="W3Tabs.open(this.id, 'schedule_config');"
			Text="<%[ Configure schedule ]%>"
			Visible="<%=!empty($_SESSION['dir'])%>"
			OnCallback="loadScheduleConfig"
		/>
		<button id="btn_job_history" type="button" class="w3-bar-item w3-button tab_btn" onclick="W3Tabs.open(this.id, 'job_history'); oJobHistoryList.table.responsive.recalc();"><%[ Job history ]%></button>
		<com:TActiveLinkButton
			ID="JobSchedulesBtn"
			CssClass="w3-bar-item w3-button tab_btn"
			Text="<%[ Job schedules ]%>"
			OnCallback="loadSchedules"
			Attributes.onclick="W3Tabs.open(this.id, 'job_schedules');"
		/>
	</div>

	<!-- Job Log -->
	<div class="w3-container tab_item<%=$this->getJobId() == 0 ? ' hide' : ''%>" id="job_log">
		<com:TActiveLinkButton
			ID="CancelBtn"
			OnClick="cancel"
			CssClass="w3-button w3-green w3-margin-bottom"
			Display="None"
			ClientSide.OnSuccess="job_callback_func(true);"
		>
			<i class="fa fa-stop"></i> &nbsp;<%[ Cancel job ]%>
		</com:TActiveLinkButton>
		<com:TActiveLinkButton
			ID="RestoreBtn"
			Attributes.onclick="document.location = '<%=$this->Service->constructUrl('RestoreWizard', array('jobid' => $this->getJobId()))%>';"
			CssClass="w3-button w3-green w3-margin-bottom"
			Display="None"
		>
			<i class="fa fa-reply"></i> &nbsp;<%[ Restore ]%>
		</com:TActiveLinkButton>
		<com:TActiveLinkButton ID="DeleteBtn" CssClass="w3-button w3-red w3-margin-bottom w3-right" Attributes.onclick="$('#job_delete_confirm').show(); return false;">
			<i class="fa fa-trash-alt"></i> &nbsp;<%[ Delete job ]%> <%=$this->getJobId()%>
		</com:TActiveLinkButton>
		<div class="w3-panel w3-card-2" style="clear: right;">
			<h5><%[ Job: ]%> <%=$this->getJobUname()%> &nbsp;
				<com:TActiveLabel ID="RunningIcon" Attributes.title="<%[ Job is running ]%>">
					<i class="fa fa-cog w3-spin"></i>
				</com:TActiveLabel>
				<com:TActiveLabel ID="FinishedIcon" Attributes.title="<%[ Job is finished ]%>">
					<i class="fa fa-check"></i>
				</com:TActiveLabel>
			</h5>
			<com:TCallback
				ID="RunningJobStatusCb"
				OnCallback="runningJobStatus"
				ClientSide.OnLoading="oRunningJobStatus.show_loader(true);"
				ClientSide.OnComplete="oRunningJobStatus.init_refresh(); oRunningJobStatus.show_loader(false);"
			/>
			<div class="w3-row">
				<div id="status_running_job_warning_container" class="w3-panel w3-pale-yellow w3-border" style="display: none">
					<h3><%[ Warning ]%></h3>
					<p id="status_running_job_warning_msg"></p>
					<div id="status_running_job_warning_label_btn" class="w3-section" style="display: none">
						<com:Bacularis.Web.Portlets.LabelVolume ID="LabelMedia" />
					</div>
				</div>
				<a href="javascript:void(0)" onclick="W3SubTabs.open('status_running_job_subtab_graphical', 'status_running_job_graphical_output', 'job_log');"<%=!$this->allow_graph_mode ? ' style="display: none"' : ''%>>
					<div id="status_running_job_subtab_graphical" class="subtab_btn w3-half w3-bottombar w3-hover-light-grey w3-border-red w3-padding">
						<%[ Running job status ]%>
						<i id="status_running_job_loading" class="fa fa-sync w3-spin w3-right" style="display: none; vertical-align: super;"></i>
					</div>
				</a>
				<a href="javascript:void(0)" onclick="W3SubTabs.open('joblog_subtab_text', 'joblog_text_output', 'job_log');">
					<div id="joblog_subtab_text" class="subtab_btn w3-half w3-bottombar w3-hover-light-grey w3-padding">
						<%[ Raw job log ]%>
						<i id="joblog_loading" class="fa fa-sync w3-spin w3-right" style="display: none; vertical-align: super;"></i>
					</div>
				</a>
				<a href="javascript:void(0)" onclick="W3SubTabs.open('jobfiles_subtab_text', 'jobfiles_list', 'job_log'); load_job_list_files();"<%=!$this->allow_list_files_mode ? ' style="display: none"' : ''%>>
					<div id="jobfiles_subtab_text" class="subtab_btn w3-half w3-bottombar w3-hover-light-grey w3-padding"><%[ Job files ]%></div>
				</a>
			</div>
			<div id="status_running_job_graphical_output" class="subtab_item" style="display: none">
				<h4 id="status_running_job_status_not_supported" style="display: none"><%[ Graphical job status is supported for jobs running on Bacula clients version 9.0 and greater. ]%></h4>
				<div id="status_running_job_graphical_container">
					<div class="w3-right w3-margin-top w3-margin-right" title="<%[ To disable refreshing please type 0. ]%>">
						<span style="line-height: 41px"><%[ Refresh interval (sec.): ]%></span> <input type="text" id="status_running_job_refresh_interval" class="w3-input w3-border w3-right w3-margin-left" value="5" style="width: 50px"/>
					</div>
					<div id="status_running_job"><table></table></div>
					<com:Bacularis.Web.Portlets.JobBandwidthLimit
						ID="JobBandwidth"
						OnCallback="runningJobStatus"
						JobId="<%=$this->SourceTemplateControl->getJobId()%>"
						JobUname="<%=$this->SourceTemplateControl->getJobUname()%>"
					/>
					<com:TJuiProgressbar Display="None" />
				</div>
				<script>
var oRunningJobStatus = {
	data: {},
	refresh_timeout: null,
	ids: {
		loader: 'status_running_job_loading',
		running_job: 'status_running_job',
		refresh_interval: 'status_running_job_refresh_interval',
		status_not_supported: 'status_running_job_status_not_supported',
		graphical_container: 'status_running_job_graphical_container',
		warning: {
			container: 'status_running_job_warning_container',
			msg: 'status_running_job_warning_msg',
			label_btn: 'status_running_job_warning_label_btn'
		},
		header: {
			version: 'status_client_version',
			uname: 'status_client_uname',
			started_epoch: 'status_client_started_time',
			jobs_run: 'status_client_jobs_running',
			plugins: 'status_client_plugins',
			bwlimit: 'status_client_bwlimit',
			debug: 'status_client_debug'
		},
		show: {
			maxjobs: 'status_client_maxjobs',
			enabled: 'status_client_enabled'
		}
	},
	init: function() {
		this.set_events();
		this.init_refresh();
	},
	set_data: function(data) {
		this.data = data;
	},
	set_events: function() {
		var refresh_interval_el = document.getElementById(this.ids.refresh_interval);
		refresh_interval_el.addEventListener('keyup', function(e) {
			this.init_refresh();
		}.bind(this));
	},
	init_refresh: function() {
		var refresh_interval_el = document.getElementById(this.ids.refresh_interval);
		var interval = refresh_interval_el.value;
		this.set_refresh_timeout(interval);
	},
	set_refresh_timeout: function(timeout) {
		if (!this.data.is_running) {
			return;
		}
		timeout = parseInt(timeout, 10) * 1000;
		if (isNaN(timeout)) {
			return;
		}
		if (this.refresh_timeout !== null) {
			clearTimeout(this.refresh_timeout);
		}
		if (timeout === 0) {
			return;
		}
		this.refresh_timeout = setTimeout(function() {
			this.refresh_status();
		}.bind(this), timeout);
	},
	refresh_status: function() {
		var cb = <%=$this->RunningJobStatusCb->ActiveControl->Javascript%>;
		if (W3Tabs.is_open('job_log')) {
			cb.dispatch();
		}
	},
	update: function(data) {
		this.set_data(data);
		if (this.is_status_supported() === false) {
			return;
		}
		var el, val;
		if (this.data.is_running) {
			if (this.data.job.status === 'R') {
				this.add_running_job(this.data.job);
			} else {
				/**
				 * Do nothing, just wait where jobstatus will change
				 * from 'C' into 'R'. Jobs with 'C' jobstatus are not
				 * visible in status client output.
				 */
			}
		} else {
			clear_node('#' + this.ids.running_job);
			$('#' + this.ids.refresh_interval).parent().hide();
			var graphical_container = document.getElementById(this.ids.graphical_container);
			graphical_container.style.display = 'none';
			if (document.getElementById('jobfiles_list').style.display == 'none') {
				W3SubTabs.open('joblog_subtab_text', 'joblog_text_output', 'job_log');
			}
		}
	},
	add_running_job: function(job, full_refresh) {
		var table = document.createElement('TABLE');
		table.className = 'w3-table w3-stripped w3-border status_table running_job_table';
		table.setAttribute('rel', job.jobid);

		// Type
		var type = JobType.get_type(job.type);
		this.add_job_row(table, '<%[ Type: ]%>', type);

		// Level
		var level = job.type === 'R' ? '-' : JobLevel.get_level(job.level);
		this.add_job_row(table, '<%[ Level: ]%>', level);

		// Job bytes
		var jobbytes = Units.get_formatted_size(job.jobbytes);
		this.add_job_row(table, '<%[ Job bytes: ]%>', jobbytes);

		// Job files
		this.add_job_row(table, '<%[ Job files: ]%>', job.jobfiles);

		// Average job speed
		var ave_speed = Units.format_speed(job.bytes_sec, null, true, true);
		var ave_job_speed = ave_speed.value.toFixed(2) + ' ' + ave_speed.format;
		this.add_job_row(table, '<%[ Average speed: ]%>', ave_job_speed);

		// Processing file
		if (job.hasOwnProperty('processing_file') && job.processing_file) {
			var processing_file = document.createElement('SPAN');
			processing_file.title = job.processing_file;
			if (job.processing_file.length > 60) {
				processing_file.textContent = job.processing_file.substr(0, 17) + ' (..) ' + job.processing_file.substr(-37);
			} else {
				processing_file.textContent = job.processing_file;
			}
			this.add_job_row(table, '<%[ Processing file: ]%>', processing_file.outerHTML);
		}

		var job_name = '<%=$this->getJobName()%>';
		var bytes = parseInt(job.jobbytes, 10);
		var files = parseInt(job.jobfiles, 10);
		files = files > 0 ? (files - 1) : 0;
		var est = estimate_job(oData.jobs, job_name, job.level);

		// Progress bar bytes
		var bytes_progress;
		if (job.type === 'B' && est.est_bytes > 0) {
			bytes_progress = document.createElement('DIV');
			bytes_progress.className = 'progressbar';
			bytes_progress.title = '<%[ Progress bar displays estimated values ]%>';
			var bytes_label = document.createElement('DIV');
			bytes_label.className = 'progressbar-label';
			var bytes_perc = ((100 * bytes) / est.est_bytes);
			if (bytes_perc > 100) {
				bytes_perc = 100;
			}
			bytes_label.textContent =  Units.get_formatted_size(bytes) + ' / <%[ est. ]%> ' +  Units.get_formatted_size(est.est_bytes) + ' (' + bytes_perc.toFixed(1) + '%' + ')';
			bytes_progress.style.width = '70%';
			bytes_progress.appendChild(bytes_label);
			var bytes_bar = $(bytes_progress);
			bytes_bar.progressbar({
				max: est.est_bytes,
				value: bytes
			});
		} else {
			bytes_progress = '<%[ Not available ]%>';
		}
		this.add_job_row(table, '<%[ Byte progress bar: ]%>', bytes_progress);


		// Progress bar files
		var files_progress;
		if (job.type === 'B' && est.est_files > 0) {
			files_progress = document.createElement('DIV');
			files_progress.className = 'progressbar';
			files_progress.title = '<%[ Progress bar displays estimated values ]%>';
			var files_label = document.createElement('DIV');
			files_label.className = 'progressbar-label';
			var files_perc = ((100 * files) / est.est_files);
			if (files_perc > 100) {
				files_perc = 100;
			}
			files_label.textContent =  files + ' / <%[ est. ]%> ' +  parseInt(est.est_files, 10) + ' (' + files_perc.toFixed(1) + '%' + ')';
			files_progress.style.width = '70%';
			files_progress.appendChild(files_label);
			var files_bar = $(files_progress);
			files_bar.progressbar({
				max: est.est_files,
				value: files
			});
		} else if (job.type === 'R' && job.hasOwnProperty('expected_files') && job.expected_files > 0) {
			files_progress = document.createElement('DIV');
			files_progress.className = 'progressbar';
			var files_label = document.createElement('DIV');
			files_label.className = 'progressbar-label';
			var fexamined = parseInt(job.files_examined, 10);
			var fexpected = parseInt(job.expected_files, 10);
			var files_perc = ((100 * fexamined) / fexpected);
			if (files_perc > 100) {
				files_perc = 100;
			}
			files_label.textContent =  fexamined + ' / ' +  fexpected + ' (' + files_perc.toFixed(1) + '%' + ')';
			files_progress.style.width = '70%';
			files_progress.appendChild(files_label);
			var files_bar = $(files_progress);
			files_bar.progressbar({
				max: fexpected,
				value: fexamined
			});
		} else {
			files_progress = '<%[ Not available ]%>';
		}
		this.add_job_row(table, '<%[ File progress bar: ]%>', files_progress);

		// Job errors
		this.add_job_row(table, '<%[ Job errors: ]%>', job.errors);

		// Read bytes
		var read_bytes = Units.get_formatted_size(job.readbytes);
		this.add_job_row(table, '<%[ Read bytes: ]%>', read_bytes);

		// Examined files
		this.add_job_row(table, '<%[ Examined files: ]%>', job.files_examined);

		// Bandwidth limit
		var bwlimit = '<%[ No limit ]%>';
		var span = document.createElement('SPAN');
		var l = parseInt(job.bwlimit, 10);
		if (l > 0) {
			fl = Units.format_speed(l, null, true, true);
			bwlimit = fl.value.toFixed(2) + ' ' + fl.format;
		}
		var text = document.createTextNode(bwlimit + '\u00A0\u00A0');
		span.appendChild(text);
		var a = document.createElement('A');
		a.className = 'w3-hover-opacity';
		a.href = 'javascript:void(0)';
		a.addEventListener('click', function(e) {
			oJobBandwidthLimit.set_value(job.bwlimit);
			oJobBandwidthLimit.open_popup();
		});
		a.title = '<%[ Set job bandwidth limit ]%>';
		var i = document.createElement('I');
		i.className = 'fas fa-tachometer-alt w3-large';
		a.appendChild(i);
		span.appendChild(a);

		this.add_job_row(table, '<%[ Bandwidth limit: ]%>', span);

		var running_job_el = document.getElementById(this.ids.running_job);
		var t = running_job_el.querySelector('table');
		running_job_el.replaceChild(table, t);
	},
	add_job_row: function(table, key, value) {
		var tr = document.createElement('TR');
		var tdl = document.createElement('TD');
		var tdr = document.createElement('TD');
		tdl.textContent = key;
		if (value instanceof HTMLElement) {
			tdr.appendChild(value);
		} else {
			tdr.innerHTML = value;
		}
		tr.appendChild(tdl);
		tr.appendChild(tdr);
		table.appendChild(tr);
	},
	is_status_supported: function() {
		var supported = false;
		var not_supported = document.getElementById(this.ids.status_not_supported);
		var graphical_container = document.getElementById(this.ids.graphical_container);
		if (this.data && this.data.hasOwnProperty('header') && this.data.header && this.data.header.hasOwnProperty('version')) {
			var match = this.data.header.version.match(/^(\d+)\.(\d+)\.(\d+)\s+\(/);
			if (match) {
				var major = match[1];
				var minor = match[2];
				var release = match[3];
				if (major >= 9 && minor >= 0 && release >= 0) {
					supported = true;
					not_supported.style.display = 'none';
					graphical_container.style.display = '';
				}
			}
		} else if (not_supported.style.display == 'none') {
			not_supported.style.display = '';
			graphical_container.style.display = 'none';
			W3SubTabs.open('joblog_subtab_text', 'joblog_text_output', 'job_log');
		}
		return supported;
	},
	show_loader: function(show) {
		document.getElementById(this.ids.loader).style.display = (show === true ? '' : 'none');
	},
	show_warning: function(show) {
		var warning = document.getElementById(oRunningJobStatus.ids.warning.container);
		warning.style.display = show ? 'block' : 'none';
	},
	set_media_request_msg: function(data) {
		if (data.waiting) {
			var msg;
			var label_btn = document.getElementById(oRunningJobStatus.ids.warning.label_btn);
			label_btn.style.display = 'none';
			if (data.volume) {
				if (data.write) {
					msg = '<%[ The job needs media. ]%> <%[ Please mount volume %volume or label a new one for storage: %storage, pool: %pool, media type: %mediatype. ]%>';
					label_btn.style.display = '';
				} else {
					msg = '<%[ The job needs media. ]%> <%[ Please mount volume %volume for storage: %storage, pool: %pool, media type: %mediatype. ]%>';
				}
				msg = msg.replace('%volume', '<strong>' + data.volume + '</strong>');
			} else {
				msg = '<%[ The job needs media. ]%> <%[ Please create a new volume for storage: %storage, pool: %pool, media type: %mediatype. ]%>';
				label_btn.style.display = '';
			}
			msg = msg.replace('%storage', '<strong>' + data.storage + '</strong>');
			msg = msg.replace('%pool', '<strong>' + data.pool + '</strong>');
			msg = msg.replace('%mediatype', '<strong>' + data.mediatype + '</strong>');
			var message = document.getElementById(oRunningJobStatus.ids.warning.msg);
			message.innerHTML = msg;
			oRunningJobStatus.show_warning(true);
		} else {
			oRunningJobStatus.show_warning(false);
		}
	}
}

function init_graphical_running_job_status(data, tab_data) {
	oRunningJobStatus.update(data);
	var tabs = Object.keys(tab_data);
	for (var i = 0; i < tabs.length; i++) {
		document.getElementById(tabs[i]).parentNode.style.display = (tab_data[tabs[i]] ? '' : 'none');
	}
	if (document.getElementById('status_running_job_subtab_graphical').classList.contains(W3SubTabs.css.tab_item_hover)) {
		W3SubTabs.open('status_running_job_subtab_graphical', 'status_running_job_graphical_output', 'job_log');
	}
}

oRunningJobStatus.init();

MonitorParams = {
	jobs: {
		name: ['<%=$this->getJobName()%>']
	}
};
$(function() {
	MonitorCalls.push(function() { oRunningJobStatus.refresh_status(); });
});
				</script>
			</div>
			<com:TConditional
				Condition="$this->allow_graph_mode"
			>
				<prop:FalseTemplate>
					<script>
						$(function() {
							W3SubTabs.open('joblog_subtab_text', 'joblog_text_output', 'job_log');
						});
					</script>
				</prop:FalseTemplate>
			</com:TConditional>
			<div id="joblog_text_output" class="subtab_item" style="display: none">
				<div class="w3-right w3-margin-top w3-margin-right" title="<%[ Refresh job log ]%>">
					<a href="javascript:void(0)"class="w3-margin-bottom raw" onclick="job_callback_func(true);"><%[ Refresh log ]%> &nbsp;<i class="fa fa-sync"></i></a>
				</div>
				<com:TActiveLinkButton
					ID="LogOrderBtn"
					CssClass="w3-margin-top w3-margin-right w3-right raw"
					OnClick="changeJobLogOrder"
					Attributes.title="<%[ Set job log order (ascending/descending) ]%>"
				>
					<%[ Log order ]%> &nbsp;<i class="fa fa-sort-amount-down"></i>
				</com:TActiveLinkButton>
				<div class="w3-code">
					<pre><com:TActiveLabel ID="JobLog" /></pre>
				</div>
			</div>
			<div id="jobfiles_list" class="subtab_item" style="display: none">
				<com:Bacularis.Web.Portlets.JobListFiles
					ID="FileList"
				/>
			</div>
			<com:TConditional
				Condition="$this->allow_list_files_mode"
			>
				<prop:TrueTemplate>
					<script>
						$(function() {
							W3SubTabs.open('joblog_subtab_text', 'joblog_text_output', 'job_log');
						});
					</script>
				</prop:TrueTemplate>
			</com:TConditional>
		</div>
		<com:TCallback
			ID="RefreshJobLog"
			OnCallback="refreshJobLog"
			ClientSide.OnLoading="show_joblog_loader(true)"
			ClientSide.OnComplete="show_joblog_loader(false); job_callback_duration = new Date().getTime();"
		/>
		<script type="text/javascript">
			var job_callback_duration;
			var job_callback_func = function(force) {
				var callback = <%=$this->RefreshJobLog->ActiveControl->Javascript%>;
				var reload = document.getElementById('<%=$this->RunningIcon->ClientID%>').style.display != 'none';
				if ((reload && W3Tabs.is_open('job_log')) || force) {
					callback.dispatch();
				}
			}
			var show_joblog_loader = function(show) {
				var loader = document.getElementById('joblog_loading');
				if (show) {
					loader.style.display = '';
				} else {
					loader.style.display = 'none';
				}
			}
			setTimeout(function() {
				if (oData && oData.running_jobs.length > 0) {
					job_callback_func(true);
				}
			}, 3000);
		</script>
	</div>
	<div id="job_delete_confirm" class="w3-modal" style="display: none">
		<div class="w3-modal-content w3-card-4 w3-padding-large w3-animate-zoom" style="width:600px">
			<span onclick="$('#job_delete_confirm').hide();" class="w3-button w3-xlarge w3-hover-red w3-display-topright">&times;</span>
			<h2><%[ Delete job ]%></h2>
			<p><%[ Are you sure, you want to delete this job? ]%></p>
			<div class="w3-center">
				<button type="button" class="w3-button w3-red" onclick="$('#job_delete_confirm').hide();"><i class="fa fa-times"></i> &nbsp;<%[ Cancel ]%></button>
				<com:TActiveLinkButton
					ID="DeleteBtnConfirm"
					CssClass="w3-button w3-green"
					OnClick="delete"
					ClientSide.OnSuccess="document.location.href='<%=$this->Service->constructUrl('JobList')%>';"
				>
					<i class="fa fa-trash-alt"></i>  &nbsp;<%[ Delete ]%>
				</com:TActiveLinkButton>
			</div>
		</div>
	</div>

	<!-- Job Graphs -->
	<div class="w3-container tab_item" id="job_graphs" style="display: <%=$this->getJobId() == 0 ? 'block' : 'none'%>">
		<div id="job_graph_container">
			<div>
				<div id="jobs_summary_graph"></div>
				<div id="jobs_summary_legend"></div>
			</div>
			<div>
				<div id="job_size_graph" style="height: 390px"></div>
			</div>
			<div>
				<div id="job_files_graph" style="height: 390px"></div>
			</div>
		</div>
		<script>
var oJobGraphs = {
	ids: {
		jobs_summary_graph : 'jobs_summary_graph',
		jobs_summary_legend : 'jobs_summary_legend',
		job_size_graph : 'job_size_graph',
		job_files_graph : 'job_files_graph',
		job_graphs: 'job_graphs'
	},
	graphs: {
		job_summary: null,
		job_size: null,
		job_files: null
	},
	colors: {
		F: '#63c422',
		I: '#2980B9',
		D: '#D68910',
		O: 'red'
	},
	get_graph_options: function() {
		return {
			fontColor: (ThemeMode.is_dark() ? 'white': 'black'),
			legend: {
				show: true,
				noColumns: 9,
				labelBoxHeight: 10,
				position : 'ne',
				backgroundColor: (ThemeMode.is_dark() ? 'black' : 'white')
			},
			bars: {
				show: true,
				fill: true,
				horizontal : false,
				shadowSize : 0
			},
			xaxis: {
				mode : 'time',
				timeMode: 'UTC',
				labelsAngle : 45,
				autoscale: true,
				showLabels: true,
				color: (ThemeMode.is_dark() ? 'white': 'black')
			},
			yaxis: {
				min: 0,
				color: (ThemeMode.is_dark() ? 'white': 'black')
			},
			lines: {
				show: true,
				lineWidth: 0,
				fill: true,
				steps: true
			},
			selection: {
				mode : 'x'
			},
			grid: {
				outlineWidth: 0,
				color: (ThemeMode.is_dark() ? 'white': 'black')
			},
			HtmlText: false
		}
	},
	txt: {
		job_summary: {
			graph_title: '<%[ Job status summary ]%>'
		},
		job_size: {
			graph_title: '<%[ Job size / Time ]%> - <%[ last %days days ]%>'.replace('%days', 30),
			xaxis_title: '<%[ Time ]%>',
			yaxis_title: '<%[ Job size ]%>'
		},
		job_files: {
			graph_title: '<%[ Job files / Time ]%> - <%[ last %days days ]%>'.replace('%days', 30),
			xaxis_title: '<%[ Time ]%>',
			yaxis_title: '<%[ Files count ]%>'
		},
	},
	initialized: false,
	extended_graph_jt: ['B'],
	job_info: <%=json_encode($this->getJobInfo())%>,
	init: function() {
		this.set_events();
	},
	update: function() {
		if (!$('#' + this.ids.job_graphs).is(':visible') || (!oData || oData.jobs.length == 0)) {
			// do update only if tab with graphs is opened and if there are finished jobs
			return;
		}

		// job summary pie graph
		this.prepare_job_summary();

		if (this.display_extended_graphs()) {
			// job size - last 30 days
			this.prepare_job_size();

			// job files - last 30 days
			this.prepare_job_files();
		}

		if (!this.initialized) {
			/**
			 * Initialization and events has to be done when graphs already exists.
			 * From this reason it is done at the end of update and only once.
			 */
			this.initialized = true;
			this.init();
		}
	},
	display_extended_graphs: function() {
		var disp_ext_graphs = false;
		if (this.job_info.hasOwnProperty('job') && this.job_info.job.hasOwnProperty('jobtype')) {
			job_type = String.fromCharCode(this.job_info.job.jobtype);
			disp_ext_graphs = (this.extended_graph_jt.indexOf(job_type) !== -1);
		}
		return disp_ext_graphs;
	},
	set_events: function() {
		if (!this.display_extended_graphs()) {
			return;
		}

		var select_area = function(area) {
			var opts = {
				xaxis : {
					min : area.x1,
					max : area.x2,
					mode : 'time',
					timeMode: 'UTC',
					labelsAngle : 45,
					color: 'black',
					autoscale: true,
					color: (ThemeMode.is_dark() ? 'white': 'black')
					},
				yaxis : {
					min : area.y1,
					max : area.y2,
					color: 'black',
					autoscale: true,
					color: (ThemeMode.is_dark() ? 'white': 'black')
				}
			};
			return opts;
		};

		// JOB SIZE

		var job_size_select_cb = function(area) {
			var opts = select_area(area);
			this.prepare_job_size(opts);
		}.bind(this);

		var job_size_graph_container = document.getElementById(this.ids.job_size_graph);

		// set Flotr-specific select area event for job size graph
		Flotr.EventAdapter.observe(job_size_graph_container, 'flotr:select', job_size_select_cb);

		// set Flotr-specific click area event (zoom reset) for job size graph
		Flotr.EventAdapter.observe(job_size_graph_container, 'flotr:click', function () {
			this.prepare_job_size();
		}.bind(this));

		// JOB FILES

		var job_files_select_cb = function(area) {
			var opts = select_area(area);
			this.prepare_job_files(opts);
		}.bind(this);

		var job_files_graph_container = document.getElementById(this.ids.job_files_graph);

		// set Flotr-specific select area event for job files graph
		Flotr.EventAdapter.observe(job_files_graph_container, 'flotr:select', job_files_select_cb);

		// set Flotr-specific click area event (zoom reset) for job files graph
		Flotr.EventAdapter.observe(job_files_graph_container, 'flotr:click', function (e) {
			this.prepare_job_files();
		}.bind(this));
	},
	prepare_job_objs: function(jobs, graph_type)  {
		var job;
		var job_objs = [];
		for (var i = 0; i < jobs.length; i++) {
			if (jobs[i].jobstatus == 'R' || jobs[i].jobstatus == 'C' || jobs[i].endtime === null) {
				continue;
			}
			job = new JobClass(jobs[i], graph_type);
			job_objs.push(job);
		}
		return job_objs;
	},
	prepare_job_summary: function() {
		this.destroy_job_summary();

		Statistics.grab_statistics(oData, {
			job_states: JobStatus.get_states(),
			job_age: 0
		});
		this.graphs.job_summary = new GraphPieClass({
			data: Statistics.jobs_summary,
			container_id: this.ids.jobs_summary_graph,
			graph_options: {
				fontColor: (ThemeMode.is_dark() ? 'white': 'black'),
				legend: {
					container: $('#' + this.ids.jobs_summary_legend)
				},
				grid: {
					color: (ThemeMode.is_dark() ? 'white': 'black')
				},
				title: this.txt.job_summary.graph_title
			}
		});
	},
	prepare_job_size: function(opts) {
		this.destroy_job_size();
		var options = {
			title: this.txt.job_size.graph_title,
			xaxis: {
				title: this.txt.job_size.xaxis_title
			},
			yaxis: {
				title: this.txt.job_size.yaxis_title,
				tickFormatter: function(val, axis_opts) {
					return Units.get_formatted_size(val);
				}
			}
		};
		var jobs = this.prepare_job_objs(oData.jobs, 'job_size');
		var container = document.getElementById(this.ids.job_size_graph);
		opts = $.extend(true, opts || {}, options);
		this.graphs.job_size = this.prepare_job_graph(jobs, container, opts);
	},
	prepare_job_files: function(opts) {
		this.destroy_job_files();
		var options = {
			title: this.txt.job_files.graph_title,
			xaxis: {
				title: this.txt.job_files.xaxis_title
			},
			yaxis: {
				title: this.txt.job_files.yaxis_title,
				tickFormatter: function(val, axis_opts) {
					return parseInt(val, 10);
				}
			}
		};
		var jobs = this.prepare_job_objs(oData.jobs, 'job_files');
		var container = document.getElementById(this.ids.job_files_graph);
		opts = $.extend(true, opts || {}, options);
		this.graphs.job_files = this.prepare_job_graph(jobs, container, opts);
	},
	prepare_job_graph: function(jobs, container, opts) {
		var now = (new Date()).getTime();
		const graph_options = this.get_graph_options();
		var options = $.extend(true, graph_options, {
			xaxis: {
				min: (now - 2592000000),
				max: now,
				timeMode: 'UTC'
			},
			yaxis: {
				autoscale: true,
				min: 0,
				max: null
			}
		});
		if (opts) {
			options = $.extend(true, options, opts);
		}

		var series_uniq = {};
		for (var i = 0; i < jobs.length; i++) {
			if(jobs[i].start_stamp < graph_options.xaxis.min || jobs[i].end_stamp > graph_options.xaxis.max) {
				continue;
			}
			if (series_uniq.hasOwnProperty(jobs[i].job.level) == false) {
				series_uniq[jobs[i].job.level] = [];
			}
			series_uniq[jobs[i].job.level].push(jobs[i].start_point, jobs[i].end_point, [null, null]);

		}
		var serie, series = [], label;
		for (var key in series_uniq) {
			serie = [];
			for (var i = 0; i < series_uniq[key].length; i++) {
				serie.push(series_uniq[key][i]);
			}
			label = JobLevel.get_level(key);
			var color = this.colors.O;
			if (this.colors.hasOwnProperty(key)) {
				color = this.colors[key];
			}
			series.push({
				data: serie,
				label: label,
				color: color
			});
		}
		return this.draw_graph(container, series, options);
	},
	draw_graph: function(container, series, opts) {
		return Flotr.draw(
			container,
			series,
			opts
		);
	},
	destroy_job_files: function() {
		if (this.graphs.job_files) {
			this.graphs.job_files.destroy();
		}
	},
	destroy_job_size: function() {
		if (this.graphs.job_size) {
			this.graphs.job_size.destroy();
		}
	},
	destroy_job_summary: function() {
		if (this.graphs.job_summary) {
			this.graphs.job_summary.destroy();
		}
	}
};
		</script>
	</div>
	<div class="w3-container tab_item" id="job_config" data-btn="<%=$this->JobConfigBtn->ClientID%>" style="display: none">
		<com:Bacularis.Web.Portlets.BaculaConfigDirectives
			ID="JobConfig"
			ComponentType="dir"
			ResourceType="Job"
			ShowCancelButton="false"
			ShowSectionTabs="true"
			OnSave="reloadJobInfo"
			DisableRename="true"
		/>
	</div>
	<div class="w3-container tab_item" id="fileset_config" data-btn="<%=$this->FilesetConfigBtn->ClientID%>" style="display: none">
		<com:Bacularis.Web.Portlets.BaculaConfigDirectives
			ID="FileSetConfig"
			ComponentType="dir"
			ResourceType="Fileset"
			ShowRemoveButton="false"
			ShowCancelButton="false"
			OnSave="reloadJobInfo"
		/>
	</div>
	<div class="w3-container tab_item" id="schedule_config" data-btn="<%=$this->ScheduleConfigBtn->ClientID%>" style="display: none">
		<com:Bacularis.Web.Portlets.BaculaConfigDirectives
			ID="ScheduleConfig"
			ComponentType="dir"
			ResourceType="Schedule"
			ShowRemoveButton="false"
			ShowCancelButton="false"
			OnSave="reloadJobInfo"
		/>
	</div>
	<div class="w3-container tab_item" id="job_history" style="display: none">
		<table id="job_history_list" class="w3-table w3-striped w3-hoverable w3-margin-bottom" style="width: 100%">
			<thead>
				<tr>
					<th></th>
					<th><%[ JobId ]%></th>
					<th><%[ Name ]%></th>
					<th><%[ Type ]%></th>
					<th class="w3-center"><%[ Level ]%></th>
					<th class="w3-center">ClientId</th>
					<th class="w3-center"><%[ Client ]%></th>
					<th class="w3-center"><%[ Scheduled time ]%></th>
					<th class="w3-center"><%[ Start time ]%></th>
					<th class="w3-center"><%[ End time ]%></th>
					<th class="w3-center"><%[ Real end time ]%></th>
					<th class="w3-center">JobTDate</th>
					<th class="w3-center">VolSessionId</th>
					<th class="w3-center">VolSessionTime</th>
					<th class="w3-center"><%[ Job status ]%></th>
					<th class="w3-center"><%[ Size ]%></th>
					<th class="w3-center"><%[ Read bytes ]%></th>
					<th class="w3-center"><%[ Files ]%></th>
					<th class="w3-center"><%[ Job errors ]%></th>
					<th class="w3-center"><%[ Job missing files ]%></th>
					<th class="w3-center">PoolId</th>
					<th class="w3-center"><%[ Pool ]%></th>
					<th class="w3-center">FileSetId</th>
					<th class="w3-center"><%[ FileSet ]%></th>
					<th class="w3-center">PriorJobId</th>
					<th class="w3-center"><%[ Purged files ]%></th>
					<th class="w3-center"><%[ Has base ]%></th>
					<th class="w3-center"><%[ Reviewed ]%></th>
					<th class="w3-center"><%[ Comment ]%></th>
					<th class="w3-center"><%[ File table ]%></th>
					<th class="w3-center"><%[ Action ]%></th>
				</tr>
			</thead>
			<tbody id="job_history_list_body"></tbody>
			<tfoot>
				<tr>
					<th></th>
					<th><%[ JobId ]%></th>
					<th><%[ Name ]%></th>
					<th><%[ Type ]%></th>
					<th class="w3-center"><%[ Level ]%></th>
					<th class="w3-center">ClientId</th>
					<th class="w3-center"><%[ Client ]%></th>
					<th class="w3-center"><%[ Scheduled time ]%></th>
					<th class="w3-center"><%[ Start time ]%></th>
					<th class="w3-center"><%[ End time ]%></th>
					<th class="w3-center"><%[ Real end time ]%></th>
					<th class="w3-center">JobTDate</th>
					<th class="w3-center">VolSessionId</th>
					<th class="w3-center">VolSessionTime</th>
					<th class="w3-center"><%[ Job status ]%></th>
					<th class="w3-center"><%[ Size ]%></th>
					<th class="w3-center"><%[ Read bytes ]%></th>
					<th class="w3-center"><%[ Files ]%></th>
					<th class="w3-center"><%[ Job errors ]%></th>
					<th class="w3-center"><%[ Job missing files ]%></th>
					<th class="w3-center">PoolId</th>
					<th class="w3-center"><%[ Pool ]%></th>
					<th class="w3-center">FileSetId</th>
					<th class="w3-center"><%[ FileSet ]%></th>
					<th class="w3-center">PriorJobId</th>
					<th class="w3-center"><%[ Purged files ]%></th>
					<th class="w3-center"><%[ Has base ]%></th>
					<th class="w3-center"><%[ Reviewed ]%></th>
					<th class="w3-center"><%[ Comment ]%></th>
					<th class="w3-center"><%[ File table ]%></th>
					<th class="w3-center"><%[ Action ]%></th>
				</tr>
			</tfoot>
		</table>
<script type="text/javascript">
var oJobHistoryList = {
	ids: {
		job_list: 'job_history_list',
		job_list_body: 'job_history_list_body'
	},
	data: [],
	table: null,
	init: function() {
		this.data = oData.jobs;
		if (this.table) {
			update_job_table(this.table, this.data);
		} else {
			this.set_table();
		}
	},
	set_table: function() {
		this.table = $('#' + this.ids.job_list).DataTable({
			data: this.data,
			deferRender: true,
			dom: 'lBfrtip',
			stateSave: true,
			stateDuration: KEEP_TABLE_SETTINGS,
			buttons: [
				'copy', 'csv', 'colvis'
			],
			columns: [
				{
					className: 'details-control',
					orderable: false,
					data: null,
					defaultContent: '<button type="button" class="w3-button w3-blue"><i class="fa fa-angle-down"></i></button>'
				},
				{data: 'jobid'},
				{data: 'name'},
				{
					data: 'type',
					render: function(data, type, row) {
						return JobType.get_type(data);
					}
				},
				{
					data: 'level',
					render: function(data, type, row) {
						return (['R', 'D'].indexOf(row.type) === -1 ? JobLevel.get_level(data) : '-');
					}
				},
				{
					data: 'clientid',
					visible: false
				},
				{
					data: 'client',
					visible: false
				},
				{
					data: 'schedtime_epoch',
					render: render_date_ts,
					visible: false
				},
				{
					data: 'starttime_epoch',
					render: render_date_ts
				},
				{
					data: 'endtime_epoch',
					render: render_date_ts
				},
				{
					data: 'realendtime_epoch',
					render: render_date_ts,
					visible: false
				},
				{
					data: 'jobtdate',
					render: render_date_ts_local,
					visible: false
				},
				{
					data: 'volsessionid',
					visible: false
				},
				{
					data: 'volsessiontime',
					render: render_date_ts_local,
					visible: false
				},
				{
					data: 'jobstatus',
					render: render_jobstatus,
					className: 'w3-center'
				},
				{
					data: 'jobbytes',
					render: render_bytes
				},
				{
					data: 'readbytes',
					render: render_bytes,
					visible: false
				},
				{data: 'jobfiles'},
				{
					data: 'joberrors',
					visible: false
				},
				{
					data: 'jobmissingfiles',
					visible: false
				},
				{
					data: 'poolid',
					visible: false
				},
				{
					data: 'pool',
					visible: false
				},
				{
					data: 'filesetid',
					visible: false
				},
				{
					data: 'fileset',
					visible: false
				},
				{
					data: 'priorjobid',
					visible: false
				},
				{
					data: 'purgedfiles',
					visible: false
				},
				{
					data: 'hasbase',
					visible: false
				},
				{
					data: 'reviewed',
					visible: false
				},
				{
					data: 'comment',
					visible: false
				},
				{
					data: 'filetable',
					visible: false
				},
				{
					data: 'jobid',
					render: function (data, type, row) {
						var btn = document.createElement('BUTTON');
						btn.className = 'w3-button w3-green';
						btn.type = 'button';
						var i = document.createElement('I');
						i.className = 'fa fa-list-ul';
						var label = document.createTextNode(' <%[ Details ]%>');
						btn.appendChild(i);
						btn.innerHTML += '&nbsp';
						btn.appendChild(label);
						btn.setAttribute('onclick', "document.location.href = '/web/job/history/" + data + "/'");
						return btn.outerHTML;
					}
				}
			],
			responsive: {
				details: {
					type: 'column'
				}
			},
			columnDefs: [{
				className: 'control',
				orderable: false,
				targets: 0
			},
			{
				className: 'action_col',
				orderable: false,
				targets: [ 30 ]
			},
			{
				className: "dt-center",
				targets: [ 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ]
			},
			{
				className: "dt-body-right",
				targets: [ 15, 16 ]
			}],
			order: [1, 'desc'],
			initComplete: function () {
				this.api().columns([3, 4, 5, 14]).every(function () {
					var column = this;
					var select = $('<select><option value=""></option></select>')
					.appendTo($(column.footer()).empty())
					.on('change', function () {
						var val = dtEscapeRegex(
							$(this).val()
						);
						column
						.search(val ? '^' + val + '$' : '', true, false)
						.draw();
					});
					if (column[0][0] == 14) {
						column.data().unique().sort().each(function (d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" title="' + JobStatus.get_desc(d) + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '" title="' + JobStatus.get_desc(d) + '">' + d + '</option>');
							}
						});
					} else {
						column.cells('', column[0]).render('display').unique().sort().each(function(d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
						});
					}
				});
			}
		});
	}
};
MonitorParams = {
	jobs: {
		name: ['<%=$this->getJobName()%>']
	}
};
$(function() {
	MonitorCallsInterval.push(function() {
		oJobGraphs.update();
		oJobHistoryList.init();
	});
	ThemeMode.add_cb(() => {
		oJobGraphs.update();
	});
});
let fragment = get_url_fragment();
fragment = fragment ? '#' + fragment : '';
<%=$this->getJobId() > 0 ? "window.history.pushState({}, '', '/web/job/history/" . $this->getJobId() . "/" . $this->getJobName() . "/' + fragment)" : ''%>;
</script>
	</div>
	<div class="w3-container tab_item" id="job_schedules" data-btn="<%=$this->JobSchedulesBtn->ClientID%>" style="display: none">
		<com:Bacularis.Web.Portlets.StatusSchedule
			ID="Schedules"
		/>
	</div>
</com:TContent>

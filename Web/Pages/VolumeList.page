<%@ MasterClass="Bacularis\Web\Layouts\Main" Theme="Baculum-v2"%>
<com:TContent ID="Main">
	<!-- Header -->
	<header class="w3-container">
		<h5>
			<b><i class="fa fa-hdd"></i> <%[ Volume list ]%></b>
		</h5>
	</header>
	<div class="w3-container tab_item">
		<div class="w3-margin-bottom">
			<com:Bacularis.Web.Portlets.LabelVolume />
			<com:Bacularis.Web.Portlets.UpdateSlots />
		</div>
		<com:Bacularis.Web.Portlets.TabViews ID="VolumeViews" />
		<table id="volume_list" class="w3-table w3-striped w3-hoverable w3-margin-bottom selectable" style="width: 100%">
			<thead>
				<tr>
					<th></th>
					<th>MediaId</th>
					<th><%[ Name ]%></th>
					<th><%[ Slot ]%></th>
					<th>PoolId</th>
					<th><%[ Pool ]%></th>
					<th>InChanger</th>
					<th>StorageId</th>
					<th><%[ Storage ]%></th>
					<th>DeviceId</th>
					<th><%[ Vol. status ]%></th>
					<th><%[ Enabled ]%></th>
					<th><%[ Recycle ]%></th>
					<th>MediaType</th>
					<th>MediaTypeId</th>
					<th>LabelType</th>
					<th><%[ First written ]%></th>
					<th><%[ Last written ]%></th>
					<th><%[ Vol. bytes ]%></th>
					<th><%[ Max. vol. bytes ]%></th>
					<th><%[ Max. vol. jobs ]%></th>
					<th><%[ Max. vol. files ]%></th>
					<th><%[ Vol. capacity bytes ]%></th>
					<th><%[ Vol. abytes ]%></th>
					<th><%[ Vol. apadding ]%></th>
					<th><%[ Vol. hole bytes ]%></th>
					<th><%[ Vol. holes ]%></th>
					<th><%[ Vol. parts ]%></th>
					<th><%[ Vol. errors ]%></th>
					<th><%[ Vol. writes ]%></th>
					<th><%[ Label date ]%></th>
					<th><%[ Vol. jobs ]%></th>
					<th><%[ Vol. files ]%></th>
					<th><%[ Vol. blocks ]%></th>
					<th><%[ Vol. mounts ]%></th>
					<th><%[ Action on purge ]%></th>
					<th><%[ Vol. retention ]%></th>
					<th><%[ Cache retention ]%></th>
					<th><%[ Vol. use duration ]%></th>
					<th><%[ Media addressing ]%></th>
					<th><%[ Vol. read time ]%></th>
					<th><%[ Vol. write time ]%></th>
					<th><%[ Vol. type ]%></th>
					<th><%[ Vol. cloud parts ]%></th>
					<th><%[ Last part bytes ]%></th>
					<th><%[ End file ]%></th>
					<th><%[ End block ]%></th>
					<th>LocationId</th>
					<th><%[ Recycle count ]%></th>
					<th><%[ Initial write ]%></th>
					<th>ScratchPoolId</th>
					<th><%[ Scratch pool ]%></th>
					<th>RecyclePoolId</th>
					<th><%[ Recycle pool ]%></th>
					<th><%[ Comment ]%></th>
					<th><%[ When expire ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</thead>
			<tbody id="pool_list_body"></tbody>
			<tfoot>
				<tr>
					<th></th>
					<th>MediaId</th>
					<th><%[ Name ]%></th>
					<th><%[ Slot ]%></th>
					<th>PoolId</th>
					<th><%[ Pool ]%></th>
					<th>InChanger</th>
					<th>StorageId</th>
					<th><%[ Storage ]%></th>
					<th>DeviceId</th>
					<th><%[ Vol. status ]%></th>
					<th><%[ Enabled ]%></th>
					<th><%[ Recycle ]%></th>
					<th>MediaType</th>
					<th>MediaTypeId</th>
					<th>LabelType</th>
					<th><%[ First written ]%></th>
					<th><%[ Last written ]%></th>
					<th><%[ Vol. bytes ]%></th>
					<th><%[ Max. vol. bytes ]%></th>
					<th><%[ Max. vol. jobs ]%></th>
					<th><%[ Max. vol. files ]%></th>
					<th><%[ Vol. capacity bytes ]%></th>
					<th><%[ Vol. abytes ]%></th>
					<th><%[ Vol. apadding ]%></th>
					<th><%[ Vol. hole bytes ]%></th>
					<th><%[ Vol. holes ]%></th>
					<th><%[ Vol. parts ]%></th>
					<th><%[ Vol. errors ]%></th>
					<th><%[ Vol. writes ]%></th>
					<th><%[ Label date ]%></th>
					<th><%[ Vol. jobs ]%></th>
					<th><%[ Vol. files ]%></th>
					<th><%[ Vol. blocks ]%></th>
					<th><%[ Vol. mounts ]%></th>
					<th><%[ Action on purge ]%></th>
					<th><%[ Vol. retention ]%></th>
					<th><%[ Cache retention ]%></th>
					<th><%[ Vol. use duration ]%></th>
					<th><%[ Media addressing ]%></th>
					<th><%[ Vol. read time ]%></th>
					<th><%[ Vol. write time ]%></th>
					<th><%[ Vol. type ]%></th>
					<th><%[ Vol. cloud parts ]%></th>
					<th><%[ Last part bytes ]%></th>
					<th><%[ End file ]%></th>
					<th><%[ End block ]%></th>
					<th>LocationId</th>
					<th><%[ Recycle count ]%></th>
					<th><%[ Initial write ]%></th>
					<th>ScratchPoolId</th>
					<th><%[ Scratch pool ]%></th>
					<th>RecyclePoolId</th>
					<th><%[ Recycle pool ]%></th>
					<th><%[ Comment ]%></th>
					<th><%[ When expire ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</tfoot>
		</table>
		<p class="info w3-hide-medium w3-hide-small"><%[ Tip: Use left-click to select table row. Use CTRL + left-click to multiple row selection. Use SHIFT + left-click to add a range of rows to selection. ]%></p>
	</div>
	<div id="table_predefined_filters_body" style="display: none; height: 38px; width: 290px;">
		<div id="table_predefined_filters_fields" class="w3-show-inline-block w3-left w3-margin-right" style="line-height: 38px">
			<select id="table_predefined_filters_value_type" style="width: 250px;">
				<option value=""><%[ All pools ]%></option>
			</select>
		</div>
	</div>
<script type="text/javascript">
var oVolumeList = {
	table: null,
	table_toolbar: null,
	actions: [
		{
			action: 'prune',
			label: '<%[ Prune ]%>',
			value: 'mediaid',
			callback: <%=$this->PruneVolumesAction->ActiveControl->Javascript%>,
			before: function() {
				oBulkActionsModal.show_output(true);
			}
		},
		{
			action: 'purge',
			label: '<%[ Purge ]%>',
			value: 'mediaid',
			callback: <%=$this->PurgeVolumesAction->ActiveControl->Javascript%>,
			before: function() {
				oBulkActionsModal.show_output(true);
			}
		},
		{
			action: 'delete',
			label: '<%[ Delete ]%>',
			value: 'mediaid',
			callback: <%=$this->DeleteVolumesAction->ActiveControl->Javascript%>,
			before: function() {
				oBulkActionsModal.show_output(true);
			}
		}
	],
	ids: {
		volume_list: 'volume_list',
		volume_list_body: 'volume_list_body',
		table_predefined_filters: 'table_predefined_filters',
		table_predefined_filters_body: 'table_predefined_filters_body',
		table_predefined_filters_value_type: 'table_predefined_filters_value_type',
	},
	init: function(data) {
		this.data = data;
		if (this.table) {
			this.refresh(this.data);
		} else {
			this.set_table();
			this.set_bulk_actions();
			this.set_events();
			this.set_predefined_filters();
			this.set_filters();
		}
	},
	refresh: function(data) {
		const page = this.table.page();
		this.table.clear().rows.add(data).draw();
		this.table.page(page).draw(false);
		this.table_toolbar.style.display = 'none';
	},
	update_volumes: function() {
		const cb = <%=$this->UpdateVolumes->ActiveControl->Javascript%>;
		cb.dispatch();
	},
	set_events: function() {
		document.getElementById(this.ids.volume_list).addEventListener('click', function(e) {
			$(function() {
				this.table_toolbar.style.display = this.table.rows({selected: true}).data().length > 0 ? '' : 'none';
			}.bind(this));
		}.bind(this));
		const filters_select = document.getElementById(this.ids.table_predefined_filters_value_type);
		filters_select.addEventListener('change', (e) => {
			this.reset_filters();
			const pool = filters_select.value;
			if (pool) {
				this.set_filters({pool: pool});
			}
		});
	},
	set_table: function(data) {
		this.table = $('#' + this.ids.volume_list).DataTable({
			data: this.data,
			deferRender: true,
			dom: 'lB<"table_toolbar"><"#table_predefined_filters">frtip',
			stateSave: true,
			stateDuration: KEEP_TABLE_SETTINGS,
			buttons: [
				'copy', 'csv', 'colvis'
			],
			columns: [
				{
					className: 'details-control',
					orderable: false,
					data: null,
					defaultContent: '<button type="button" class="w3-button w3-blue"><i class="fa fa-angle-down"></i></button>'
				},
				{data: 'mediaid'},
				{data: 'volumename'},
				{data: 'slot'},
				{
					data: 'poolid',
					visible: false
				},
				{
					data: 'pool',
					visible: false
				},
				{
					data: 'inchanger',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					}
				},
				{
					data: 'storageid',
					visible: false
				},
				{
					data: 'storage',
					visible: false
				},
				{
					data: 'deviceid',
					visible: false
				},
				{data: 'volstatus'},
				{
					data: 'enabled',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{
					data: 'recycle',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{data: 'mediatype'},
				{
					data: 'mediatypeid',
					visible: false
				},
				{
					data: 'labeltype',
					visible: false
				},
				{
					data: 'firstwritten',
					render: render_date_local,
					visible: false
				},
				{
					data: 'lastwritten',
					render: render_date_local
				},
				{
					data: 'volbytes',
					render: render_bytes
				},
				{
					data: 'maxvolbytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'maxvoljobs',
					visible: false
				},
				{
					data: 'maxvolfiles',
					visible: false
				},
				{
					data: 'volcapacitybytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'volabytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'volapadding',
					visible: false
				},
				{
					data: 'volholebytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'volholes',
					visible: false
				},
				{
					data: 'volparts',
					visible: false
				},
				{
					data: 'volerrors',
					visible: false
				},
				{
					data: 'volwrites',
					visible: false
				},
				{
					data: 'labeldate',
					render: render_date_local,
					visible: false
				},
				{
					data: 'voljobs',
					visible: false
				},
				{
					data: 'volfiles',
					visible: false
				},
				{
					data: 'volblocks',
					visible: false
				},
				{
					data: 'volmounts',
					visible: false
				},
				{
					data: 'actiononpurge',
					render: function(data, type, row) {
						return (data === 1) ? '<%[ Yes ]%>' : '<%[ No ]%>';
					},
					visible: false
				},
				{
					data: 'volretention',
					render: render_time_period,
					visible: false
				},
				{
					data: 'cacheretention',
					render: render_time_period,
					visible: false
				},
				{
					data: 'voluseduration',
					render: render_time_period,
					visible: false
				},
				{
					data: 'mediaaddressing',
					visible: false
				},
				{
					data: 'volreadtime',
					render: render_time_period,
					visible: false
				},
				{
					data: 'volwritetime',
					render: render_time_period,
					visible: false
				},
				{
					data: 'voltype',
					visible: false
				},
				{
					data: 'volcloudparts',
					visible: false
				},
				{
					data: 'lastpartbytes',
					render: render_bytes,
					visible: false
				},
				{
					data: 'endfile',
					visible: false
				},
				{
					data: 'endblock',
					visible: false
				},
				{
					data: 'locationid',
					visible: false
				},
				{
					data: 'recyclecount',
					visible: false
				},
				{
					data: 'initialwrite',
					visible: false
				},
				{
					data: 'scratchpoolid',
					visible: false
				},
				{
					data: 'scratchpool',
					visible: false
				},
				{
					data: 'recyclepoolid',
					visible: false
				},
				{
					data: 'recyclepool',
					visible: false
				},
				{
					data: 'comment',
					visible: false
				},
				{
					data: 'whenexpire',
					render: render_date_ex,
					visible: false
				},
				{
					data: 'mediaid',
					render: function(data, type, row) {
						let btns = '';
						let i;
						if (<%=$this->User->isInRole(WebUserRoles::ADMIN) === false || empty($_SESSION['dir']) ? 'false' : 'true'%>) {
							// Quick edit button
							const quick_edit = document.createElement('BUTTON');
							quick_edit.className = 'w3-button w3-green';
							quick_edit.type = 'button';
							quick_edit.title = '<%[ Quick edit ]%>';
							i = document.createElement('I');
							i.className = 'fa fa-edit';
							quick_edit.appendChild(i);
							quick_edit.setAttribute('onclick', "open_quick_volume_edit(" + data + ", '" + row.volumename + "');");
							btns += (quick_edit.outerHTML + ' ');

							// Jobs on volume button
							const jobs_on_volume = document.createElement('BUTTON');
							jobs_on_volume.className = 'w3-button w3-green';
							jobs_on_volume.type = 'button';
							jobs_on_volume.title = '<%[ Volume job list ]%>';
							i = document.createElement('I');
							i.className = 'fa fa-check';
							jobs_on_volume.appendChild(i);
							jobs_on_volume.setAttribute('onclick', "oJobsOnVolumeWindow.open_window(" + data + ", '" + row.volumename + "');");
							btns += (jobs_on_volume.outerHTML + ' ');
						}
						const details = document.createElement('BUTTON');
						details.className = 'w3-button w3-green';
						details.type = 'button';
						details.title = '<%[ Details ]%>';
						i = document.createElement('I');
						i.className = 'fa fa-list-ul';
						details.appendChild(i);
						details.setAttribute('onclick', "document.location.href = '/web/volume/" + data + "/'");
						btns += details.outerHTML;
						return btns;
					}
				}
			],
			responsive: {
				details: {
					type: 'column'
				}
			},
			columnDefs: [{
				className: 'control',
				orderable: false,
				targets: 0
			},
			{
				className: "dt-center",
				targets: [ 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 ]
			},
			{
				className: 'action_col',
				orderable: false,
				targets: [ 56 ]
			},
			{
				className: "dt-body-right",
				targets: [ 18 ]
			}],
			select: {
				style:    'os',
				selector: 'td:not(:last-child):not(:first-child)',
				blurable: false
			},
			order: [3, 'asc'],
			drawCallback: function () {
				this.api().columns([2, 3, 6, 10, 13]).every(function () {
					var column = this;
					var select = $('<select><option value=""></option></select>')
					.appendTo($(column.footer()).empty())
					.on('change', function () {
						var val = dtEscapeRegex(
							$(this).val()
						);
						column
						.search(val ? '^' + val + '$' : '', true, false)
						.draw();
					});
					if (column[0][0] == 3) {
						column.cells('', column[0]).render('display').unique().sort(sort_natural).each(function(d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
						});
					} else {
						column.cells('', column[0]).render('display').unique().sort().each(function(d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
						});
					}
				});
			}
		});
	},
	set_bulk_actions: function() {
		this.table_toolbar = get_table_toolbar(this.table, this.actions, {
			actions: '<%[ Actions ]%>',
			ok: '<%[ OK ]%>'
		});
	},
	set_filters: function(params) {
		const ppool = get_url_param('pool');
		const pool = (params && params.hasOwnProperty('pool')) ? params.pool : ppool;
		const volstatus = (params && params.hasOwnProperty('volstatus')) ? params.volstatus : get_url_param('volstatus');
		let search_func;
		if (pool) {
			search_func = (settings, search_data, index, row_data, counter) => {
				if (settings.nTable.id == this.ids.volume_list) {
					var filter_pool = search_data[5];
					return (pool == filter_pool);
				} else {
					return true;
				}
			};
		}
		if (search_func) {
			$.fn.dataTable.ext.search.push(search_func);
			if (ppool) {
				// if type parameter passed in the URL query string, reset all filters (@see search(''))
				this.table.columns().search('').draw();
			} else {
				this.table.columns().draw();
			}
			this.set_volstatus_filter();
			this.set_filter_select(pool);
		} else {
			this.set_volstatus_filter(true);
		}
	},
	set_predefined_filters() {
		const select = document.getElementById(this.ids.table_predefined_filters_value_type);
		const pools = <%=json_encode($this->pools)%>;
		let option, label;
		for (let i = 0; i < pools.length; i++) {
			option = document.createElement('OPTION');
			option.value = pools[i].name;
			label = document.createTextNode(pools[i].name);
			option.appendChild(label);
			select.appendChild(option);
		}
		const predefined = document.getElementById(this.ids.table_predefined_filters);
		predefined.className = 'dt-buttons';
		const body = document.getElementById(this.ids.table_predefined_filters_body);
		predefined.appendChild(body);
		body.style.display = 'block';
	},
	set_volstatus_filter: function(reset) {
		const volstatus = get_url_param('volstatus');
		if (volstatus || reset) {
			// set volstatus filter
			const select = this.table.column(10).footer().querySelector('SELECT');
			select.value = reset ? '' : volstatus;
			$(select).trigger('change');
		}
	},
	set_filter_select: function(type) {
		const select = document.getElementById(this.ids.table_predefined_filters_value_type);
		select.value = type;
	},
	reset_filters: function() {
		if ($.fn.dataTable.ext.search.length > 0) {
			$.fn.dataTable.ext.search.pop();
		}

		// reset address bar
		let addr = location.href.replace(/[&;?]?(pool|volstatus)=[^&;]+/g, '');
		history.replaceState({}, '', addr);

		this.table.columns().draw();
	}
};
oVolumeData = [];
function set_volume_list_data(data) {
	oVolumeData = data;
	<%=$this->VolumeViews->ClientID%>_TabViews.tabs.apply_filters();
}
function get_volume_list_data() {
	return oVolumeData;
}
function update_volume_list_table(data, init) {
	if (init) {
		oVolumeList.refresh(data);
	} else {
		oVolumeList.init(data);
	}
}
$(function() {
	const volumes = <%=json_encode($this->volumes)%>;
	set_volume_list_data(volumes);
});
/**
 * Defne bulk actions output id here because expression tags (< % = % >) cannot
 * be defined in the TCallback ClientSide properties.
 */
var bulk_actions_output_id = '<%=$this->SourceTemplateControl->BulkActions->BulkActionsOutput->ClientID%>';
</script>
<com:TCallback ID="PruneVolumesAction" OnCallback="pruneVolumes">
	<prop:ClientSide.OnLoading>
		oBulkActionsModal.clear_output(bulk_actions_output_id);
		oBulkActionsModal.show_loader(true);
	</prop:ClientSide.OnLoading>
	<prop:ClientSide.OnComplete>
		oBulkActionsModal.show_loader(false);
	</prop:ClientSide.OnComplete>
</com:TCallback>
<com:TCallback ID="PurgeVolumesAction" OnCallback="purgeVolumes">
	<prop:ClientSide.OnLoading>
		oBulkActionsModal.clear_output(bulk_actions_output_id);
		oBulkActionsModal.show_loader(true);
	</prop:ClientSide.OnLoading>
	<prop:ClientSide.OnComplete>
		oBulkActionsModal.show_loader(false);
	</prop:ClientSide.OnComplete>
</com:TCallback>
<com:TCallback ID="DeleteVolumesAction" OnCallback="deleteVolumes">
	<prop:ClientSide.OnLoading>
		oBulkActionsModal.clear_output(bulk_actions_output_id);
		oBulkActionsModal.show_loader(true);
	</prop:ClientSide.OnLoading>
	<prop:ClientSide.OnComplete>
		oBulkActionsModal.show_loader(false);
		oVolumeList.reset_filters();
	</prop:ClientSide.OnComplete>
</com:TCallback>
<com:TCallback ID="UpdateVolumes" OnCallback="updateVolumes" />
<com:Bacularis.Web.Portlets.BulkActionsModal
	ID="BulkActions"
	RefreshPageBtn="false"
	/>
<com:Bacularis.Web.Portlets.QuickVolumeEdit
	SaveVolumeActionOk="oVolumeList.update_volumes();"
/>
<com:Bacularis.Web.Portlets.VolumeJobListWindow />
</com:TContent>

<%@ MasterClass="Bacularis\Web\Layouts\Main" Theme="Baculum-v2"%>
<com:TContent ID="Main">
	<com:BClientScript ScriptUrl=<%~ ../../../../../vendor/npm-asset/qrcodejs/qrcode.min.js %> />
	<!-- Header -->
	<header class="w3-container">
		<h5>
			<b><i class="fa-solid fa-user-gear"></i> <%[ Account settings ]%></b>
		</h5>
	</header>
	<div class="w3-bar w3-green w3-margin-bottom">
		<a id="btn_account_settings_general" href="javascript:void(0)" class="w3-bar-item w3-button tab_btn w3-grey" onclick="W3Tabs.open(this.id, 'account_settings_general');">
			<%[ General ]%>
		</a>
		<a id="btn_account_settings_auth" href="javascript:void(0)" class="w3-bar-item w3-button tab_btn" onclick="W3Tabs.open(this.id, 'account_settings_auth');">
			<%[ Security ]%>
		</a>
		<a id="btn_account_settings_tags" href="javascript:void(0)" class="w3-bar-item w3-button tab_btn" onclick="W3Tabs.open(this.id, 'account_settings_tags'); if (oTagManagerList.table) { oTagManagerList.table.responsive.recalc(); }">
			<%[ Tags ]%>
		</a>
	</div>
	<!-- General options -->
	<div class="w3-container tab_item" id="account_settings_general">
		<div class="w3-container w3-row w3-padding">
			<div class="w3-quarter w3-col"><%[ Username: ]%></div>
			<div class="w3-quarter w3-col"><com:TActiveLabel ID="Username" /></div>
		</div>
		<div class="w3-container w3-row w3-padding">
			<div class="w3-quarter w3-col"><com:TLabel ForControl="UserLongName" Text="<%[ Long name: ]%>"/></div>
			<div class="w3-quarter">
				<com:TActiveTextBox
					ID="UserLongName"
					AutoPostBack="false"
					MaxLength="100"
					CssClass="w3-input w3-border"
					AutoTrim="true"
				/>
			</div>
		</div>
		<div class="w3-container w3-row w3-padding">
			<div class="w3-quarter w3-col"><com:TLabel ForControl="UserDescription" Text="<%[ Description: ]%>"/></div>
			<div class="w3-quarter">
				<com:TActiveTextBox
					ID="UserDescription"
					TextMode="MultiLine"
					Rows="3"
					AutoPostBack="false"
					MaxLength="500"
					AutoTrim="true"
					CssClass="w3-input w3-border"
				/>
			</div>
		</div>
		<div class="w3-container w3-row w3-padding">
			<div class="w3-quarter w3-col"><com:TLabel ForControl="UserEmail" Text="<%[ E-mail: ]%>"/></div>
			<div class="w3-quarter">
				<com:TActiveTextBox
					ID="UserEmail"
					AutoPostBack="false"
					MaxLength="500"
					CssClass="w3-input w3-border"
					AutoTrim="true"
				/>
				<com:TRegularExpressionValidator
					ValidationGroup="AccSettingsGroup"
					RegularExpression="<%=WebUserConfig::EMAIL_ADDRESS_PATTERN%>"
					ControlToValidate="UserEmail"
					ErrorMessage="<%[ Invalid e-mail address value. ]%>"
					ControlCssClass="field_invalid"
				/>
			</div>
		</div>
		<com:TPanel ID="UserPasswordBox">
			<div id="user_window_password" class="w3-container w3-row w3-padding">
				<div class="w3-quarter w3-col"><com:TLabel ForControl="UserPassword" Text="<%[ Password: ]%>"/></div>
				<div class="w3-quarter">
					<com:TActiveTextBox
						ID="UserPassword"
						TextMode="Password"
						AutoPostBack="false"
						MaxLength="1000"
						CssClass="w3-input w3-border"
					/>
				</div>
				&nbsp; <a href="javascript:void(0)" onclick="var el = document.getElementById('<%=$this->UserPassword->ClientID%>'); el.type = el.type == 'text' ? 'password' : 'text'" title="<%[ Show/hide password ]%>"><i class="fa fa-eye opt_req" style="display: inline-block"></i></a>
				&nbsp;<a href="javascript:void(0)" onclick="document.getElementById('<%=$this->UserPassword->ClientID%>').value = document.getElementById('<%=$this->RetypeUserPassword->ClientID%>').value = get_random_string('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_~!@#$%^&*()_+}{|?[]\\/.,', 10); return false;" title="<%[ Generate new password ]%>"><i class="fas fa-random"></i></a>
			</div>
			<div class="w3-container w3-row w3-padding">
				<div class="w3-quarter w3-col"><com:TLabel ForControl="RetypeUserPassword" Text="<%[ Retype password: ]%>" /></div>
				<div class="w3-quarter">
					<com:TActiveTextBox
						ID="RetypeUserPassword"
						CssClass="w3-input w3-border"
						TextMode="Password"
						MaxLength="60"
						PersistPassword="true"
					/>
					<com:TRequiredFieldValidator
						ID="RequirePasswordValidator"
						ControlCssClass="field_invalid"
						Display="Dynamic"
						ControlToValidate="RetypeUserPassword"
						ValidationGroup="AccSettingsGroup"
						ErrorMessage="<%[ Please retype password. ]%>"
					/>
					<com:TRegularExpressionValidator
						ID="RegexPasswordValidator"
						ControlCssClass="field_invalid"
						Display="Dynamic"
						ControlToValidate="RetypeUserPassword"
						RegularExpression="<%=BasicUserConfig::PASSWORD_PATTERN%>"
						ValidationGroup="AccSettingsGroup"
						ErrorMessage="<%[ Password must be longer than 4 chars and not longer than 60 chars. ]%>"
					/>
					<com:TCompareValidator
						ID="ComparePasswordValidator"
						ControlCssClass="field_invalid"
						Display="Dynamic"
						ControlToValidate="RetypeUserPassword"
						ControlToCompare="UserPassword"
						ValidationGroup="AccSettingsGroup"
						Text="<%[ Passwords must be the same. ]%>"
					/>
				</div> &nbsp; <a href="javascript:void(0)" onclick="var el = document.getElementById('<%=$this->RetypeUserPassword->ClientID%>'); el.type = el.type == 'text' ? 'password' : 'text'" title="<%[ Show/hide password ]%>"><i class="fa fa-eye opt_req" style="display: inline-block"></i></a>
			</div>
		</com:TPanel>
		<div class="w3-center w3-margin-top">
			<com:TActiveLinkButton
				CssClass="w3-button w3-green"
				CausesValidation="true"
				ValidationGroup="AccSettingsGroup"
				OnClick="saveGeneral"
			>
				<prop:ClientSide.OnLoading>
					document.getElementById('account_settings_save_loader').style.display = '';
				</prop:ClientSide.OnLoading>
				<prop:ClientSide.OnComplete>
					setTimeout(function() {
						document.getElementById('account_settings_save_loader').style.display = 'none';
					}, 300);
				</prop:ClientSide.OnComplete>
				<i class="fa fa-save"></i> &nbsp;<%[ Save ]%>
			</com:TActiveLinkButton>
			<i id="account_settings_save_loader" class="fa fa-sync w3-spin" style="display: none"></i>
		</div>
	</div>

	<!-- Security options -->
	<div class="w3-container tab_item" id="account_settings_auth" style="display: none">
		<h3><%[ Multi-factor authentication ]%></h3>
		<p><%[ The two-factor authentication makes authentication process stronger by adding to traditional user/password login method one additional step (second factor). ]%></p>
		<div id="fidou2f_no_https_warning" class="w3-panel w3-orange" style="width: 1100px; display: none;">
			<h3><%[ Warning ]%></h3>
			<p><%[ The connection is not HTTPS. FIDO U2F does not work with an unencrypted HTTP connection. To use FIDO U2F, please install a valid TLS/SSL certificate. ]%></p>
		</div>
		<div class="w3-container w3-row w3-padding">
			<div class="w3-quarter w3-col"><label for="<%=$this->TwoFactorMethod->ClientID%>"><%[ Two-factor authentication method ]%>:</label></div>
			<div class="w3-quarter">
				<com:TActiveDropDownList
					ID="TwoFactorMethod"
					CssClass="w3-select w3-border"
					Width="200px"
					AutoPostBack="false"
					Attributes.onchange="oAccountSettingsFIDOU2F.show_no_https_warning();"
				>
					<com:TListItem Value="<%=WebUserConfig::MFA_TYPE_NONE%>" Text="Disabled" />
					<com:TListItem ID="TOTPItem" Value="<%=WebUserConfig::MFA_TYPE_TOTP%>" Text="TOTP 2FA" />
					<com:TListItem ID="FIDOU2FItem" Value="<%=WebUserConfig::MFA_TYPE_FIDOU2F%>" Text="FIDO U2F" />
				</com:TActiveDropDownList>
			</div>
		</div>
		<div class="w3-container w3-row w3-padding w3-center">
			<com:TActiveLinkButton
				ID="SaveMFA"
				CssClass="w3-green w3-button"
				OnClick="saveTwoFactorMethod"
			>
				<i class="fa-solid fa-save"></i> &nbsp;<%[ Save ]%>
			</com:TActiveLinkButton>
		</div>
		<div class="w3-container w3-row w3-padding">
			<h5><i class="fa-solid fa-calculator"></i> &nbsp;TOTP 2FA</h5>
			<p><%[ The second factor can use third-party authenticator application (e.g. a mobile or desktop app) that shows a generated and frequently changing code to use for authentication. ]%></p>
			<com:TPanel ID="Auth2FADisabledMsg" CssClass="w3-panel w3-pale-yellow w3-border" Display="None">
				<h3><%[ Warning ]%></h3>
				<p><%[ For used the HTTP Basic authentication the 2FA is not available. To use multi-factor authentication please switch Bacularis to other authentication method (ex. the local user authentication). ]%></p>
			</com:TPanel>
			<com:TActiveLinkButton
				ID="AuthTOTP2FAConfigure"
				CssClass="w3-green w3-button"
				Attributes.onclick="oAccountSettingsTOTP2FA.show(true);"
			>
				<%[ Configure TOTP 2FA ]%>
			</com:TActiveLinkButton>
		</div>
		<div class="w3-container w3-row w3-padding">
			<h5><i class="fa-solid fa-key"></i> &nbsp;<%[ FIDO U2F hardware keys ]%></h5>
			<p><%[  The second factor uses the U2F security hardware keys. ]%></p>
			<com:TActiveLinkButton
				ID="AuthFIDOU2FConfigure"
				CssClass="w3-green w3-button"
				Attributes.onclick="oAccountSettingsFIDOU2F.open_window(true);"
			>
				<%[ Configure U2F keys ]%>
			</com:TActiveLinkButton>
		</div>
		<div id="account_settings_totp2fa_modal" class="w3-modal" style="display: none">
			<div class="w3-modal-content w3-card-4 w3-animate-zoom" style="width: 800px">
				<header class="w3-container w3-green">
					<span onclick="oAccountSettingsTOTP2FA.show(false);" class="w3-button w3-display-topright">Ã—</span>
					<h2><%[ TOTP 2FA settings ]%></h2>
				</header>
				<div class="w3-margin-left w3-margin-right" style="max-height: 645px; margin: 10px auto;">
					<h4><%[ TOTP two-factor authentication ]%></h4>
					<p><%[ TOTP is an algorithm used for authentication with time-based one-time password. This authentication method generates time based one-time password. It uses an authenticator app like: Google Authenticator or other authentiactor apps. ]%></p>
					<com:TActivePanel ID="ConfigureTOTP2FA">
						<h5><%[ Step 1 ]%></h5>
						<p><%[ Scan in the authenticator app the QR code ]%></p>
						<div id="account_settings_totp2fa_qrcode" style="width: 260px; margin: auto;"></div>
						<p><%[ or alternatively type the code below manually to the authenticator app: ]%> <span id="account_settings_totp2fa_code"></span> <a href="javascript:void(0)" id="account_settings_totp2fa_show"><%[ show ]%></a></p>
						<com:TActiveHiddenField ID="AuthTOTP2FASecret" />
						<h5><%[ Step 2 ]%></h5>
						<p><%[ In the field below please type currently displayed 6 digit code from the authenticator app ]%></p>
						<div class="w3-row w3-section">
							<div class="w3-col w3-third"><%[ Authenticator code: ]%></div>
							<div class="w3-col w3-half">
								<com:TActiveTextBox
									ID="AuthTOTP2FAToken"
									CssClass="w3-input w3-border"
									Width="100px"
									MaxLength="6"
									Attributes.onkeypress="if (event.key == 'Enter') { $('#<%=$this->EnableTOTP2FA->ClientID%>').click(); }"
								/>
							</div>
						</div>
					</com:TActivePanel>
					<com:TActivePanel ID="ConfigureReadyTOTP2FA" Display="None">
						<p class="w3-text-green w3-center bold"><%[ TOTP 2FA is configured. ]%></p>
					</com:TActivePanel>
				</div>
				<div class="w3-center w3-margin-top w3-border-top" style="padding: 10px 0;">
					<button type="button" class="w3-button w3-green" onclick="oAccountSettingsTOTP2FA.show(false);"><i class="fa fa-times"></i> &nbsp;<%[ Close ]%></button>
					<com:TActiveLinkButton
						ID="EnableTOTP2FA"
						CssClass="w3-button w3-green"
						CausesValidation="false"
						OnCallback="enableTOTP2FA"
						Display="Dynamic"
					>
						<prop:ClientSide.OnLoading>
							document.getElementById('account_settings_add_2fa_loader').style.visibility = 'visible';
						</prop:ClientSide.OnLoading>
						<prop:ClientSide.OnComplete>
							document.getElementById('account_settings_add_2fa_loader').style.visibility = 'hidden';
						</prop:ClientSide.OnComplete>
						<i class="fa-solid fa-user-shield"></i> &nbsp;<%[ Enable TOTP 2FA ]%>
					</com:TActiveLinkButton>
					<com:TActiveLinkButton
						ID="DisableTOTP2FA"
						CssClass="w3-button w3-red"
						CausesValidation="false"
						OnCallback="disableTOTP2FA"
						Display="None"
					>
						<prop:ClientSide.OnLoading>
							document.getElementById('account_settings_add_2fa_loader').style.visibility = 'visible';
						</prop:ClientSide.OnLoading>
						<prop:ClientSide.OnComplete>
							document.getElementById('account_settings_add_2fa_loader').style.visibility = 'hidden';
						</prop:ClientSide.OnComplete>
						<i class="fa-solid fa-user-shield"></i> &nbsp;<%[ Disable TOTP 2FA ]%>
					</com:TActiveLinkButton>
					<i id="account_settings_add_2fa_loader" class="fa fa-sync w3-spin w3-margin-left" style="visibility: hidden"></i>
				</div>
				<p id="account_settings_add_2fa_error" class="w3-center w3-text-red" style="display: none; padding: 8px 14px; margin: 0;"></p>
			</div>
		</div>
		<com:TCallback ID="Auth2FALoad" OnCallback="showTOTP2FAWindow" />
		<script>
var oAccountSettingsMFA = {
	ids: {
		mfa: '<%=$this->TwoFactorMethod->ClientID%>'
	},
	txt: {
		unconfigured: ' (<%[ unconfigured ]%>)'
	},
	update_mfa_selection: function(val, text, enabled) {
		const self = oAccountSettingsMFA;
		const mfa = document.getElementById(self.ids.mfa);
		for (let i = 0; i < mfa.options.length; i++) {
			if (mfa.options[i].value != val) {
				continue;
			}
			if (enabled) {
				mfa.options[i].removeAttribute('disabled');
				mfa.options[i].textContent = text;
			} else {
				mfa.options[i].setAttribute('disabled', 'disabled');
				mfa.options[i].textContent = text + self.txt.unconfigured;
			}
			break;
		}
	},
	get_two_factor_method: function() {
		const tfm = document.getElementById(this.ids.mfa);
		return tfm.value;
	}
};
oAccountSettingsMFA.update_mfa_selection('<%=WebUserConfig::MFA_TYPE_TOTP%>', 'TOTP 2FA', <%=$this->isTOTP2FAConfigured() ? 'true' : 'false'%>);
oAccountSettingsMFA.update_mfa_selection('<%=WebUserConfig::MFA_TYPE_FIDOU2F%>', 'FIDO U2F', <%=$this->isFIDOU2FConfigured() ? 'true' : 'false'%>);
var oAccountSettingsTOTP2FA = {
	ids: {
		modal: 'account_settings_totp2fa_modal',
		totp_qrcode: 'account_settings_totp2fa_qrcode',
		totp_code: 'account_settings_totp2fa_code',
		totp_show: 'account_settings_totp2fa_show'
	},
	qrcode: null,
	init: function() {
		this.add_events();
	},
	add_events: function() {
		const link = document.getElementById(this.ids.totp_show);
		link.addEventListener('click', () => {
			const code = document.getElementById(this.ids.totp_code);
			if (code.getAttribute('data-state') == 'shown') {
				this.show_code(false);
			} else {
				this.show_code(true);
			}
		});
	},
	show: function(show) {
		const modal = document.getElementById(oAccountSettingsTOTP2FA.ids.modal);
		modal.style.display = show ? 'block' : 'none';
		if (show) {
			oAccountSettingsTOTP2FA.load();
			const token = document.getElementById('<%=$this->AuthTOTP2FAToken->ClientID%>');
			token.value = '';
			token.focus();
		}
	},
	load: function() {
		const cb = <%=$this->Auth2FALoad->ActiveControl->Javascript%>;
		cb.dispatch();
	},
	generate_qrcode: function(url) {
		oAccountSettingsTOTP2FA.clear_qrcode();
		const container = document.getElementById(oAccountSettingsTOTP2FA.ids.totp_qrcode);
		oAccountSettingsTOTP2FA.qrcode = new QRCode(
			container,
			url
		);
	},
	clear_qrcode: function() {
		if (this.qrcode) {
			this.qrcode.clear();
			this.qrcode = null;
			const qrcode = document.getElementById(oAccountSettingsTOTP2FA.ids.totp_qrcode);
			while (qrcode.firstChild) {
				qrcode.removeChild(qrcode.firstChild);
			}
		}
	},
	set_code(code) {
		const container = document.getElementById(oAccountSettingsTOTP2FA.ids.totp_code);
		container.setAttribute('data-code', code);
		container.textContent = code.replace(/./g, '*');
		oAccountSettingsTOTP2FA.show_code(false);
	},
	show_code(show) {
		const link = document.getElementById(this.ids.totp_show);
		const code = document.getElementById(this.ids.totp_code);
		const c = code.getAttribute('data-code');
		if (show) {
			code.textContent = c;
			code.setAttribute('data-state', 'shown');
			link.textContent = '<%[ hide ]%>';
		} else {
			code.textContent = c.replace(/./g, '*');
			code.setAttribute('data-state', 'hidden');
			link.textContent = '<%[ show ]%>';
		}
	}
};
oAccountSettingsTOTP2FA.init();
		</script>
		<div id="account_settings_fidou2f_list_modal" class="w3-modal" style="display: none">
			<div class="w3-modal-content w3-card-4 w3-animate-zoom" style="width: 950px">
				<header class="w3-container w3-green">
					<span onclick="oAccountSettingsFIDOU2F.show(false);" class="w3-button w3-display-topright">Ã—</span>
					<h2><%[ FIDO U2F settings ]%></h2>
				</header>
				<div class="w3-margin-left w3-margin-right" style="max-height: 645px; margin: 10px auto;">
					<h4><%[ FIDO U2F two-factor authentication ]%></h4>
					<p><%[ The FIDO U2F/CTAP1 standard adds to the authentication the second factor which uses the hardware security key. This is very strong and secure method using the asymetric cryptograhpy. A good practice is to add two security keys to be able log in even then, when you loose the main key. ]%></p>
				</div>
				<div class="w3-margin-left w3-margin-right" style="max-height: 645px; margin: 10px auto;">
					<div id="fidou2f_security_key_list">
						<button type="button" class="w3-green w3-button w3-margin-bottom" onclick="oAccountSettingsFIDOU2F.add_key();">
							<i class="fa-solid fa-plus"></i> &nbsp;<%[ Add new security key ]%>
						</button>
						<table id="fidou2f_key_list" class="display w3-table w3-striped w3-hoverable w3-margin-bottom" style="width: 100%">
							<thead>
								<tr>
									<th><%[ Key name ]%></th>
									<th><%[ Added ]%></th>
									<th><%[ Last used ]%></th>
									<th><%[ Actions ]%></th>
								</tr>
							</thead>
							<tbody id="fidou2f_key_list_body"></tbody>
							<tfoot>
								<tr>
									<th><%[ Key name ]%></th>
									<th><%[ Added ]%></th>
									<th><%[ Last used ]%></th>
									<th><%[ Actions ]%></th>
								</tr>
							</tfoot>
						</table>
					</div>
				</div>
				<div class="w3-center w3-margin-top w3-border-top" style="padding: 10px 0;">
					<button type="button" class="w3-button w3-green" onclick="oAccountSettingsFIDOU2F.show(false);"><i class="fa fa-times"></i> &nbsp;<%[ Close ]%></button>
				</div>
			</div>
		</div>
		<div id="account_settings_fidou2f_edit_key_modal" class="w3-modal" style="display: none">
			<div class="w3-modal-content w3-card-4 w3-animate-zoom" style="width: 800px">
				<header class="w3-container w3-green">
					<span onclick="oAccountSettingsFIDOU2F.show_key_window(false);" class="w3-button w3-display-topright">Ã—</span>
					<h2><%[ Key properties ]%></h2>
				</header>
				<div class="w3-margin-left w3-margin-right" style="max-height: 645px; margin: 10px auto;">
					<p><%[ Set a friendly name for your key to make it easier to recognize. ]%></p>
				</div>
				<div class="w3-margin-left w3-margin-right" style="max-height: 645px; margin: 10px auto;">
					<div class="w3-container w3-row w3-padding">
						<div class="w3-quarter w3-col"><%[ Name ]%>:</div>
						<div class="w3-quarter w3-col">
							<com:TActiveTextBox
								ID="FIDOU2FKeyName"
								CssClass="w3-input w3-border"
								Width="400px"
							/>
						</div>
					</div>
				</div>
				<com:TActiveHiddenField ID="FIDOU2FKeylId" Value="" />
				<div class="w3-center w3-margin-top w3-border-top" style="padding: 10px 0;">
					<button type="button" class="w3-button w3-red" onclick="oAccountSettingsFIDOU2F.show_key_window(false);"><i class="fa fa-times"></i> &nbsp;<%[ Cancel ]%></button>
					<button type="button" class="w3-button w3-green" onclick="oAccountSettingsFIDOU2F.save_key();"><i class="fa fa-save"></i> &nbsp;<%[ Save ]%></button>
				</div>
			</div>
		</div>
		<com:TCallback ID="LoadU2FKeys" OnCallback="loadU2FKeys" />
		<com:TCallback ID="EditU2FKey" OnCallback="editU2FKey" />
		<com:TCallback ID="SaveU2FKey" OnCallback="saveU2FKey" />
		<com:TCallback ID="GetNewU2FKeyParams" OnCallback="getNewU2FKeyParams" />
		<com:TCallback ID="CreateU2FCreds" OnCallback="createU2FCreds" />
		<com:TCallback ID="RemoveU2FCreds" OnCallback="removeU2FCreds" />
		<script>
var oAccountSettingsFIDOU2F = {
	table: null,
	ids: {
		list_modal: 'account_settings_fidou2f_list_modal',
		list_table: 'fidou2f_key_list',
		key_props_window: 'account_settings_fidou2f_edit_key_modal',
		key_name: '<%=$this->FIDOU2FKeyName->ClientID%>',
		key_id: '<%=$this->FIDOU2FKeylId->ClientID%>',
		no_https_warning: 'fidou2f_no_https_warning'
	},
	init: function(data) {
		if (this.table) {
			var page = this.table.page();
			this.table.clear().rows.add(data).draw();
			this.table.page(page).draw(false);
		} else {
			this.add_events();
			this.set_table(data);
		}
	},
	update: function(data) {
		oAccountSettingsFIDOU2F.init(data);
	},
	add_events: function() {
		const key_name = document.getElementById(this.ids.key_name);
		key_name.addEventListener('keypress', (e) => {
			if (e.key == 'Enter') {
				this.save_key();
			}
		});
	},
	show: function(show) {
		const modal = document.getElementById(this.ids.list_modal);
		modal.style.display = show ? 'block' : 'none';
	},
	load_keys: function() {
		const cb = <%=$this->LoadU2FKeys->ActiveControl->Javascript%>;
		cb.dispatch();
	},
	open_window() {
		this.load_keys();
		this.show(true);
	},
	set_table: function(data) {
		this.table = $('#' + this.ids.list_table).DataTable({
			data: data,
			deferRender: true,
			autoWidth: false,
			layout: {
				topStart: [
					{
						pageLength: {}
					},
					{
						buttons: ['copy', 'csv', 'colvis']
					}
				],
				topEnd: [
					'search'
				],
				bottomStart: [
					'info'
				],
				bottomEnd: [
					'paging'
				]
			},
			stateSave: true,
			stateDuration: KEEP_TABLE_SETTINGS,
			columns: [
				{data: 'key_name'},
				{
					data: 'added',
					render: render_date_ts_local
				},
				{
					data: 'last_used',
					render: function (data, type, row) {
						let ret = '-';
						if (data > 0 && (type == 'display' || type == 'filter')) {
							ret = render_date_ts_local(data, type, row);
						}
						return ret;
					}
				},
				{
					data: 'credential_id',
					render: function (data, type, row) {
						const container = document.createElement('SPAN');

						// Edit key button
						const edit_btn = document.createElement('BUTTON');
						edit_btn.className = 'w3-button w3-green';
						edit_btn.style.marginRight = '6px';
						edit_btn.type = 'button';
						edit_btn.title = '<%[ Edit ]%>';
						var i = document.createElement('I');
						i.className = 'fa fa-edit';
						edit_btn.setAttribute('onclick', 'oAccountSettingsFIDOU2F.edit_key("' + data + '");');
						edit_btn.appendChild(i);
						container.appendChild(edit_btn);

						// Remove key button
						const rm_btn = document.createElement('BUTTON');
						rm_btn.className = 'w3-button w3-red';
						rm_btn.type = 'button';
						rm_btn.title = '<%[ Remove ]%>';
						var i = document.createElement('I');
						i.className = 'fa fa-trash-alt';
						rm_btn.setAttribute('onclick', 'oAccountSettingsFIDOU2F.remove_u2f_creds("' + data + '", "' + row.key_name + '");');
						rm_btn.appendChild(i);
						container.appendChild(rm_btn);

						return container.outerHTML;
					}
				}
			],
			responsive: {
				details: {
					type: 'column',
					display: DataTable.Responsive.display.childRow
				}
			},
			columnDefs: [{
				className: "dt-center",
				targets: [1, 2, 3]
			}],
			order: [1, 'desc'],
			drawCallback: function () {
				this.api().columns([0]).every(function () {
					var column = this;
					var select = $('<select class="dt-select"><option value=""></option></select>')
					.appendTo($(column.footer()).empty())
					.on('change', function () {
						var val = dtEscapeRegex(
							$(this).val()
						);
						column
						.search(val ? '^' + val + '$' : '', true, false)
						.draw();
					});
					column.cells('', column[0]).render('display').unique().sort().each(function(d, j) {
						if (column.search() == '^' + dtEscapeRegex(d) + '$') {
							select.append('<option value="' + d + '" selected>' + d + '</option>');
						} else {
							select.append('<option value="' + d + '">' + d + '</option>');
						}
					});
				});
			}
		});
	},
	add_key: function() {
		const cb = <%=$this->GetNewU2FKeyParams->ActiveControl->Javascript%>;
		cb.dispatch();
	},
	add_key_cb: async function(params) {
		params.publicKey.challenge = Uint8Array.from(params.publicKey.challenge, c => c.charCodeAt(0));
		params.publicKey.user.id = Uint8Array.from(params.publicKey.user.id, c => c.charCodeAt(0));
		params.publicKey.excludeCredentials = params.publicKey.excludeCredentials.map((item) => {
			return {
				type: item.type,
				id: Uint8Array.from(item.id, c => c.charCodeAt(0))
			}
		});
		await navigator.credentials.create(params).then(function(credential) {
			const credential_json = credential.toJSON();
			const utf8_decoder = new TextDecoder('utf-8');
			const id = credential.id;
			const pub_key_ab = credential.response.getPublicKey();
			const pub_key_alg = credential.response.getPublicKeyAlgorithm();
			const auth_data_ab = credential.response.getAuthenticatorData();
			const transports = credential.response.getTransports();
			const client_data = utf8_decoder.decode(credential.response.clientDataJSON);
			const json = {
				id: id,
				type: credential.type,
				authData: new Uint8Array(auth_data_ab),
				clientDataJSON: JSON.parse(client_data),
				publicKey: new Uint8Array(pub_key_ab),
				publicKeyAlgorithm: pub_key_alg,
				transports: transports
			};
			oAccountSettingsFIDOU2F.create_u2f_creds(json);
		});
	},
	create_u2f_creds: function(credential) {
		const cb = <%=$this->CreateU2FCreds->ActiveControl->Javascript%>;
		cb.setCallbackParameter(credential);
		cb.dispatch();
	},
	remove_u2f_creds: function(credential_id, key_name) {
		const msg = "<%[ Are you sure you want to remove key '%key_name'? ]%>".replace('%key_name', key_name);;
		if (confirm(msg)) {
			const cb = <%=$this->RemoveU2FCreds->ActiveControl->Javascript%>;
			cb.setCallbackParameter(credential_id);
			cb.dispatch();
		}
	},
	edit_key: function(credential_id) {
		const self = oAccountSettingsFIDOU2F;
		const key_id = document.getElementById(self.ids.key_id);
		key_id.value = credential_id;
		const cb = <%=$this->EditU2FKey->ActiveControl->Javascript%>;
		cb.setCallbackParameter(credential_id);
		cb.dispatch();
	},
	edit_key_cb: function(name) {
		const self = oAccountSettingsFIDOU2F;
		const key_name = document.getElementById(self.ids.key_name);
		key_name.value = name;
		self.show_key_window(true);
		key_name.focus();
	},
	save_key: function() {
		const cb = <%=$this->SaveU2FKey->ActiveControl->Javascript%>;
		cb.dispatch();
	},
	show_key_window: function(show) {
		const win = document.getElementById(oAccountSettingsFIDOU2F.ids.key_props_window);
		win.style.display = show ? 'block' : 'none';
	},
	show_no_https_warning: function() {
		const tfm = oAccountSettingsMFA.get_two_factor_method();
		let show =  (window.location.protocol != 'https:' && tfm == '<%=WebUserConfig::MFA_TYPE_FIDOU2F%>');
		const warning = document.getElementById(this.ids.no_https_warning);
		warning.style.display = show ? 'block' : 'none';
	}
};
oAccountSettingsFIDOU2F.show_no_https_warning();
		</script>
	</div>

	<!-- Tag options -->
	<div class="w3-container tab_item" id="account_settings_tags" style="display: none">
		<h5><i class="fa-solid fa-tag"></i> <%[ Local user tags ]%></h5>
		<com:Bacularis.Web.Portlets.TagManager
			ID="TagManager"
		/>
	</div>
</com:TContent>

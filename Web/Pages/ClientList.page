<%@ MasterClass="Bacularis\Web\Layouts\Main" Theme="Baculum-v2"%>
<com:TContent ID="Main">
	<com:BClientScript ScriptUrl=<%~ ../../../../../vendor/npm-asset/opentip/downloads/opentip-jquery.min.js %> />
	<com:BStyleSheet StyleSheetUrl=<%~ ../../../../../vendor/npm-asset/opentip/css/opentip.css %> />
	<!-- Header -->
	<header class="w3-container">
		<h5>
			<b><i class="fa fa-desktop"></i> <%[ Client list ]%></b>
		</h5>
	</header>
	<div class="w3-container">
		<div class="w3-margin-bottom">
			<button type="button" class="w3-button w3-green<%=!$this->getApplication()->getSession()->itemAt('dir') ? ' hide': ''%>" onclick="document.location.href='<%=$this->Service->constructUrl('NewResource', array('component_type' => 'dir', 'component_name' => $this->getApplication()->getSession()->itemAt('dir'), 'resource_type' => 'Client'))%>';"><i class="fa fa-plus"></i> &nbsp;<%[ Add client ]%></button>
		</div>
		<com:Bacularis.Web.Portlets.TabViews ID="ClientViews" />
	</div>
	<!-- Tag tools -->
	<com:Bacularis.Web.Portlets.TagTools ID="TagToolsClientList" ViewName="client_list" />
	<div class="w3-container">
		<table id="client_list" class="display w3-table w3-striped w3-hoverable w3-margin-bottom" style="width: 100%">
			<thead>
				<tr>
					<th></th>
					<th>ClientId</th>
					<th><%[ Name ]%></th>
					<th><%[ Uname ]%></th>
					<th><%[ AutoPrune ]%></th>
					<th><%[ Job retention ]%></th>
					<th><%[ File retention ]%></th>
					<th><%[ Working ]%></th>
					<th><%[ Tag ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</thead>
			<tbody id="client_list_body"></tbody>
			<tfoot>
				<tr>
					<th></th>
					<th>ClientId</th>
					<th><%[ Name ]%></th>
					<th><%[ Uname ]%></th>
					<th><%[ AutoPrune ]%></th>
					<th><%[ Job retention ]%></th>
					<th><%[ File retention ]%></th>
					<th><%[ Working ]%></th>
					<th><%[ Tag ]%></th>
					<th><%[ Actions ]%></th>
				</tr>
			</tfoot>
		</table>
		<p class="info w3-hide-medium w3-hide-small"><%[ Tip: Use left-click to select table row. Use CTRL + left-click to multiple row selection. Use SHIFT + left-click to add a range of rows to selection. ]%></p>
	</div>
	<div id="table_predefined_filters_body" style="display: none; width: 290px;">
		<div id="table_predefined_filters_fields" class="w3-show-inline-block w3-margin-right">
			<select id="table_predefined_filters_value_type" class="dt-select" style="width: 250px;">
				<option value=""><%[ All clients ]%></option>
				<option value="working"><%[ Clients with running jobs ]%></option>
				<option value="not-working"><%[ Clients without running jobs ]%></option>
			</select>
		</div>
	</div>
<script type="text/javascript">
var oClientList = {
	ids: {
		client_list: 'client_list',
		client_list_body: 'client_list_body',
		table_predefined_filters: 'table_predefined_filters',
		table_predefined_filters_body: 'table_predefined_filters_body',
		table_predefined_filters_value_type: 'table_predefined_filters_value_type',
	},
	opts: {
		uname_len: 40
	},
	data: [],
	table: null,
	table_toolbar: null,
	client_running_jobs: {},
	actions: [
		{
			action: 'apply_configs',
			enabled: <%=$this->User->isInRole(WebUserRoles::ADMIN) ? 'true' : 'false'%>,
			label: '<%[ Apply configs ]%>',
			value: 'name',
			before: function() {
				const cb = () => {
					let selected = [];
					let sel_data = oClientList.table.rows({selected: true}).data();
					sel_data.each(function(v, k) {
						selected.push(v.name);
					});
					return selected;
				};
				oBulkApplyConfigsModal.set_item_cb(cb);
				oBulkApplyConfigsModal.show_window(true);
			}
		}
	],
	init: function(data) {
		this.data = data;
		if (!this.table) {
			this.set_table();
			this.set_bulk_actions();
			this.set_predefined_filters();
			this.set_events();
			this.set_filters();
		} else {
			this.refresh(data);
		}
	},
	refresh: function(data) {
		const page = this.table.page();
		this.table.clear().rows.add(data).draw();
		this.table.page(page).draw(false);
		this.table_toolbar.style.display = 'none';
	},
	set_events: function() {
		document.getElementById(this.ids.client_list).addEventListener('click', function(e) {
			$(function() {
				const wa = (this.table.rows({selected: true}).data().length > 0) ? 'show' : 'hide';
				$(this.table_toolbar).animate({
					width: wa
				}, 'fast');
			}.bind(this));
		}.bind(this));
		const filters_select = document.getElementById(this.ids.table_predefined_filters_value_type);
		filters_select.addEventListener('change', (e) => {
			this.reset_filters();
			const type = filters_select.value;
			if (type) {
				this.set_filters(type);
			}
		});
	},
	set_table: function() {
		this.table = $('#' + this.ids.client_list).DataTable({
			data: this.data,
			deferRender: true,
			autoWidth: false,
			fixedHeader: {
				header: true,
				headerOffset: $('#main_top_bar').height()
			},
			layout: {
				topStart: [
					{
						pageLength: {}
					},
					{
						buttons: ['copy', 'csv', 'colvis']
					},
					{
						div: {
							className: 'table_toolbar'
						}
					},
					{
						div: {
							id: 'table_predefined_filters'
						}
					}
				],
				topEnd: [
					'search'
				],
				bottomStart: [
					'info'
				],
				bottomEnd: [
					'paging'
				]
			},
			stateSave: true,
			stateDuration: KEEP_TABLE_SETTINGS,
			columns: [
				{
					orderable: false,
					data: null,
					defaultContent: '<button type="button" class="w3-button w3-blue"><i class="fa fa-angle-down"></i></button>'
				},
				{data: 'clientid'},
				{data: 'name'},
				{
					data: 'uname',
					render: function(data, type, row) {
						let ret = data;
						if (type == 'display') {
							const span = document.createElement('SPAN');
							span.title = data;
							span.textContent = data.substr(0, oClientList.opts.uname_len);
							ret = span.outerHTML;
						}
						return ret;
					}
				},
				{
					data: 'autoprune',
					render: function(data, type, row) {
						return (data == 1 ? '<%[ Yes ]%>' : '<%[ No ]%>');
					}
				},
				{
					data: 'jobretention',
					render: render_time_period
				},
				{
					data: 'fileretention',
					render: render_time_period
				},
				{
					data: 'clientid',
					render: (data, type, row) => {
						let ret = '-';
						let nb_job = 0;
						if (this.client_running_jobs.hasOwnProperty(data) && this.client_running_jobs[data].length > 0) {
							nb_job = this.client_running_jobs[data].length;
						}
						if (type == 'display') {
							if (nb_job > 0) {
								const span = document.createElement('SPAN');
								span.classList.add('helper');
								span.style.paddingLeft = '1.5em';
								const img = document.createElement('I');
								img.classList.add('fa-solid', 'fa-cog', 'w3-text-blue', 'w3-spin', 'w3-large');
								const nb_running =  document.createElement('SUP');
								nb_running.textContent = ' (%nb_job)'.replace('%nb_job', nb_job);
								nb_running.style.position = 'relative';
								nb_running.style.right = '-0.5em';
								nb_running.style.top = '-1.2em';
								span.appendChild(img);
								span.appendChild(nb_running);
								span.addEventListener('mouseover', () => {
									const jobs_running = this.client_running_jobs[data].map((el) => {
										const details = document.createElement('UL');
										details.style.margin = '2px 0 4px 0';
										const jobid = document.createElement('LI');
										jobid.textContent = 'JobId: ' + el.jobid;
										const jobstatus = document.createElement('LI');
										jobstatus.innerHTML= '<%[ Job status ]%>: ' + JobStatus.get_icon(el.jobstatus).outerHTML + ' (' + el.jobstatus + ')';
										const starttime = document.createElement('LI');
										starttime.textContent = '<%[ Start time ]%>: ' + Units.format_date(el.starttime_epoch);

										details.appendChild(jobid);
										details.appendChild(jobstatus);
										details.appendChild(starttime);

										let ret = el.name;
										ret += details.outerHTML;
										return ret;
									});
									showTip(span, '<%[ Client jobs ]%> (<%[ running ]%>):', jobs_running.join(''), {
										offset: [-55, 0],
										tipJoint: 'right middle'
									});
								});
								ret = span;
							}
						} else if (type == 'sort') {
							ret = nb_job;
						}
						return ret;
					}
				},
				{
					data: 'clientid',
					render: (data, type, row) => {
						const id = 'clientid';
						const tt_obj = oTagTools_<%=$this->TagToolsClientList->ClientID%>;
						const table = 'oClientList.table';
						return render_tags(type, id, data, tt_obj, table);
					}
				},
				{
					data: 'clientid',
					render: function (data, type, row) {
						let btns = '';
						let i;
						if (<%=$this->User->isInRole(WebUserRoles::ADMIN) === false || !$this->getApplication()->getSession()->itemAt('dir') ? 'false' : 'true'%>) {
							// Quick edit button
							const quick_edit = document.createElement('BUTTON');
							quick_edit.className = 'w3-button w3-green';
							quick_edit.type = 'button';
							quick_edit.title = '<%[ Quick edit ]%>';
							i = document.createElement('I');
							i.className = 'fa fa-edit';
							quick_edit.appendChild(i);
							quick_edit.setAttribute('onclick', "open_quick_resource_edit('dir', 'Client', '" + row.name + "')");
							btns += (quick_edit.outerHTML + ' ');
						}
						const details = document.createElement('BUTTON');
						details.className = 'w3-button w3-green';
						details.type = 'button';
						details.title = '<%[ Details ]%>';
						i = document.createElement('I');
						i.className = 'fa fa-list-ul';
						details.appendChild(i);
						details.setAttribute('onclick', "document.location.href = '/web/client/" + data + "/'");
						btns += details.outerHTML;
						return btns;
					}
				}
			],
			responsive: {
				details: {
					type: 'column',
					display: DataTable.Responsive.display.childRow,
					renderer: DataTable.Responsive.renderer.listHiddenNodes()
				}
			},
			columnDefs: [{
				className: 'dtr-control',
				orderable: false,
				targets: 0
			},
			{
				className: "dt-center",
				targets: [ 1, 4, 5, 6, 7, 8, 9 ]
			}],
			select: {
				style: 'os',
				selector: 'td:not(:last-child):not(:first-child):not(:nth-last-child(2))',
				blurable: false
			},
			order: [2, 'asc'],
			drawCallback: function () {
				this.api().columns([2, 3, 4, 5, 6]).every(function () {
					var column = this;
					var select = $('<select class="dt-select"><option value=""></option></select>')
					.appendTo($(column.footer()).empty())
					.on('change', function () {
						var val = dtEscapeRegex(
							$(this).val()
						);
						column
						.search(val ? '^' + val + '$' : '', true, false)
						.draw();
					});
					if (column[0][0] == 3) {
						column.data().unique().sort(sort_natural).each(function (d, j) {
							if (column.search() == '^' + dtEscapeRegex(d) + '$') {
								select.append('<option value="' + d + '" selected>' + d + '</option>');
							} else if (d) {
								select.append('<option value="' + d + '">' + d + '</option>');
							}
							select.css('max-width', '265px');
						});
					} else if (column[0][0] == 5 || column[0][0] == 6) {
						column.data().unique().sort(sort_natural).each(function (d, j) {
							var time = Units.format_time_period(d);
							var time_f = time.value + ' ' + time.format + ((time.value > 0) ? 's': '');
							if (column.search() == '^' + dtEscapeRegex(time_f) + '$') {
								select.append('<option value="' + time_f + '" selected>' + time_f + '</option>');
							} else {
								select.append('<option value="' + time_f + '">' + time_f + '</option>');
							}
						});
					} else {
						column.cells('', column[0]).render('display').unique().sort().each(function(d, j) {
							if (d) {
								if (column.search() == '^' + dtEscapeRegex(d) + '$') {
									select.append('<option value="' + d + '" selected>' + d + '</option>');
								} else {
									select.append('<option value="' + d + '">' + d + '</option>');
								}
							}
						});
					}
				});
			}
		});
	},
	set_bulk_actions: function() {
		this.table_toolbar = get_table_toolbar(this.table, this.actions, {
			actions: '<%[ Select action ]%>',
			ok: '<%[ OK ]%>'
		});
	},
	set_client_running_jobs: function() {
		const rjob_len = oData.running_jobs.length;
		let client_id;
		this.client_running_jobs = [];
		for (let i = 0; i < rjob_len; i++) {
			client_id = oData.running_jobs[i].clientid;
			if (!this.client_running_jobs.hasOwnProperty(client_id)) {
				this.client_running_jobs[client_id] = [];
			}
			this.client_running_jobs[client_id].push(oData.running_jobs[i]);
		}
	},
	reset_filters: function() {
		if ($.fn.dataTable.ext.search.length > 0) {
			$.fn.dataTable.ext.search.pop();
		}

		// reset select filters
		this.table.columns().every(function() {
			let addr = location.href.replace(/[&;?]?(type)=[^&;]+/, '');
			history.replaceState({}, '', addr);
		})

		this.table.columns().draw();
	},
	set_filters: function(type) {
		const ptype = get_url_param('type');
		type = type || ptype;
		let search_func;
		switch (type) {
			case 'working':
				search_func = (settings, search_data, index, row_data, counter) => {
					const clientid = search_data[1];
					return (this.client_running_jobs.hasOwnProperty(clientid) && this.client_running_jobs[clientid].length > 0);
				};
			break;
			case 'not-working':
				search_func = (settings, search_data, index, row_data, counter) => {
					const clientid = search_data[1];
					return (!this.client_running_jobs.hasOwnProperty(clientid) || this.client_running_jobs[clientid].length == 0);
				};
			break;
		}
		if (search_func) {
			$.fn.dataTable.ext.search.push(search_func);
			if (ptype) {
				// if type parameter passed in the URL query string, reset all filters (@see search(''))
				this.table.columns().search('').draw();
			} else {
				this.table.columns().draw();
			}
			this.set_filter_select(type);
		}
	},
	set_filter_select: function(type) {
		const select = document.getElementById(this.ids.table_predefined_filters_value_type);
		select.value = type;
	},
	set_predefined_filters() {
		const predefined = document.getElementById(this.ids.table_predefined_filters);
		predefined.className = 'dt-buttons';
		const body = document.getElementById(this.ids.table_predefined_filters_body);
		predefined.appendChild(body);
		body.style.display = 'block';
	},
	is_element_selected: function() {
		return (this.table && this.table.rows({selected: true}).data().length > 0);
	},
	is_element_opened: function() {
		const tbody = document.getElementById(this.ids.client_list_body);
		const is_opened = (tbody.querySelector('ul.dtr-details') !== null);
		return is_opened;
	}
};
function get_client_list_data() {
	return oData.clients;
}
function update_client_list_table(data, init) {
	if (init) {
		oClientList.refresh(data);
	} else {
		oClientList.init(data);
	}
}

MonitorParams = {clients: null};
$(function() {
	MonitorCallsInterval.push(function() {
		oClientList.set_client_running_jobs();
	});
	MonitorCallsInterval.push(function() {
		if (!oClientList.is_element_selected() && !oClientList.is_element_opened()) {
			<%=$this->ClientViews->ClientID%>_TabViews.tabs.apply_filters();
		}
	});
});
</script>
	<com:Bacularis.Web.Portlets.BulkApplyConfigsModal
		ID="BulkApplyConfigsClient"
		ComponentType="dir"
		ResourceType="Client"
	/>
</com:TContent>
